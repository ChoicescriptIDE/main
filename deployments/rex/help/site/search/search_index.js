const local_index = {"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"Getting Started What is the ChoiceScript IDE? User Interface Overview Setting Up Creating or Importing a Project Adding Scenes Help Topics Keyboard Shortcuts [Hotkeys] Basic Topics Advanced Topics Further Reading Information About Changelog Acknowledgements Terms & Conditions","title":"Home"},{"location":"index.html#getting-started","text":"What is the ChoiceScript IDE? User Interface Overview Setting Up Creating or Importing a Project Adding Scenes","title":"Getting Started"},{"location":"index.html#help-topics","text":"Keyboard Shortcuts [Hotkeys] Basic Topics Advanced Topics Further Reading","title":"Help Topics"},{"location":"index.html#information","text":"About Changelog Acknowledgements Terms & Conditions","title":"Information"},{"location":"acknowledgements.html","text":"First and foremost, we would like to thank Choice of Games LLC, consisting of Jason Stevan Hill, Adam Morse, ChoiceScript's creator Dan Fabulich, and the rest of their ever-growing team. Thank you for providing us with a fresh, growing, and ever-improving selection of high-quality multiple choice games. Thank you for being champions of equality. And finally, thank you for creating ChoiceScript and supporting the growth of such a very special community. We would also like to thank that same community: the forum-goers, writers, editors, beta testers, and game-players, and even those of you who haven't joined us quite yet. Without you, the fans, there would be no games\u2014there would be no ChoiceScript. There would be no CSIDE. Thank you to all, past, present, and future supporters, pioneers of all that we do and stand for. It has been, and will continue to be, our pleasure to be a part of it all. Of course, no thank you list could ever be complete without mentioning 'The CSIDE Team'\u2014the only fitting name. Four years is a very long time to work alone on a side project of this magnitude, without pay, without a clear goal, and with no finish line in sight. Between life, work, and my studies, it would have been very easy to give up on this project, way back before it had barely even begun. It would have been simpler to leave it as that simple textbox on a website that you could paste some ChoiceScript code into. From the very beginning, from a featureless, bug-ridden experiment to a feature-full, (slightly less) buggy application, they saw the potential in CSIDE and carried it with me through the years\u2014through productive times and quiet times, hard times and easy times, the joy and the pain. In no particular order, by their Choice of Games forum handles: Vendetta Fiogan Nocturnal_Stillness fantom LordIrish Shockbolt Thank you all, for everything. To all the other beta-testers who weren't with us all the way, you know who you are, and you also have our heartfelt thanks for all the parts you played, big or small. There really isn't a single person, organisation, resource, or entity listed on this page that CSIDE, in its current form, could have existed without. It really wouldn't be half the program it is today without every last one of you. We hope you enjoy using CSIDE just as much as we did creating it. Happy scripting, The CSIDE Team! Resources, Images, Code Libraries etc. Node.js nwjs jQuery & jQuery UI Knockout.js Knockout-JQuery UI noty Bootstrap Bootbox.js Mousetrap bootstrap contextmenu by sydcanem Monaco Editor Font Awesome marked nspell Inno Setup write-file-atomic 'Trash' and 'Username' by sindresorhus grunt-nw-builder UglifyJS mkdocs mkdocs-material mkdocs-localsearch uuid","title":"Acknowledgements"},{"location":"advanced-topics.html","text":"C The Console S Stepping","title":"Advanced topics"},{"location":"advanced-topics.html#c","text":"The Console","title":"C"},{"location":"advanced-topics.html#s","text":"Stepping","title":"S"},{"location":"basic-topics.html","text":"C Code Editor I Image Scenes Issues P Projects Project Options Publishing and Exporting S Scenes Q Quicktest and Randomtest T Tab Panels Testing and Debugging","title":"Basic topics"},{"location":"basic-topics.html#c","text":"Code Editor","title":"C"},{"location":"basic-topics.html#i","text":"Image Scenes Issues","title":"I"},{"location":"basic-topics.html#p","text":"Projects Project Options Publishing and Exporting","title":"P"},{"location":"basic-topics.html#s","text":"Scenes","title":"S"},{"location":"basic-topics.html#q","text":"Quicktest and Randomtest","title":"Q"},{"location":"basic-topics.html#t","text":"Tab Panels Testing and Debugging","title":"T"},{"location":"changelog.html","text":"v1.3.1 - 21/06/2019 Hotfix release. Reverts atomic file writing changes from v1.3.0 due to corruption of metadata. Fixes Corrupted metadata on file writes Changes File writes are no longer atomic v1.3.0 - 03/06/2019 Feature release focussing on user dictionary improvements and bug fixes. Fixes Custom themes should now persist across sessions on all platforms Fixed an issue related to spellchecking words wrapped in quotation marks v1.2.1 HotFix (correctly initialize default tabs) Fixed a minor issue with Dropbox error handling CSIDE will no longer ignore the *text_image command behaviour Fixed an issue with 'stepping' being unable to handle *fake_choice Fixed disappearing window control/UI jumping bug The 'Run Project' hotkey is now documented as intended Additions User Dictionary Improvements Optimised add/remove word functionality Added support for importing/exporting JSON-esque dictionaries Added a 'Remove All' (words) button Added real-time search filter behaviour to the input box to help with navigating large dictionaries Added additional options to the indentation setting, and converted its settings control to a dropdown menu Added the line and column position of the cursor to the code editor footer Added an option to 'clear game data' to a running project's ChoiceScript menu This will allow for clearing of earned achievements etc. Added support to cycle through the current project's scenes via hotkeys Mac: Cmd+Alt+PgUp/PgDwn Windows: Ctrl+PgUp/PgDwn Added hotkeys for changing font size (ctrl/cmd[+-]) [NEEDS DOCUMENTING] Extended custom theme scripting support: Misc bug fixes and error clarifications. Adds new tokens: gutter, gutter-numbers, error-lines, cursor, matches See example project for usage! Atomic file writes (this should help combat reported file corruption)g Changes Updated internal copy of ChoiceScript to Github commit Moved the right panel tab control to be vertical Updated the notification library: Should improve accessibility Modified appearance of notifications Turning the 'Word Count' setting off will now disable word counting rather than just hiding it (for performance reasons). Minor UI (colour) improvement for night mode's scene/project drag and drop Added a link to CSIDE's thread in the 'What is CSIDE?' documentation page v1.2.1 - 27/12/2017 Fixes a critical bug caused by turning persistent session 'off' when persistent tabs are supported. Fixes default tab order is now initialized correctly when the persistent session setting is disabled v1.2.0 - 18/12/2017 Feature release including custom themes, code folding and selection matching, a handful of bug fixes and some minor behaviour tweaks. Additions Code folding/collapsing Example projects are now runnable Selection matching (highlights other instances of selected text) Custom theme scripting (and matching example project) Spellcheck now supports including/excluding of command lines Visible indentation support for spaces New shortcut combos for Delete line Duplicate line Toggle block comment Fixes 'Insert double line break' menu option now respects indentation Fixed a file path issue on attempts to open a project folder Made some changes to mitigate a possible ui/locking bug with project controls Misspelled words next to speech marks are now detected correctly Changes Updated internal copy of ChoiceScript to Github commit 'Untitled_X' scenes are now generated with fully lowercase names Numerous changes to spellcheck and indentation syntax implementation Editor history delay has been drastically reduced which should result in smaller/more precise undo steps Updates: Development channel warning removed Name of update channel now appears in the update title Development updates are now coloured in yellow Update channel setting now has a description Removals The mixed scene indentation test performed on newly opened files has been disabled The additional temporary editor themes have been removed (in light of custom theme support) Only the Light, Dark and Dichromatic themes will be supported going forward Users who's config points to removed themes will be set back to the Light theme v1.1.2 - 7/10/2017 Includes a permission issue fix (from v1.1.1), some changes to support updates on Linux, and the latest copy of ChoiceScript. Additions Basic support for updates on Linux(esque) machines Fixes Fixes deleting (moving files to Trash) on MAC Changes Updated internal copy of ChoiceScript to Github commit v1.1.1 - 01/10/2017 ChoiceScript update, package (update) size reduction and an aesthetic bug fix. Fixes Fixed out of sync scenes/projects panel animation Changes Updated internal copy of ChoiceScript to Github commit Fixed issues with the build process that caused updates to be unnecessarily large Updates will be smaller Application should also open more quickly v1.1.0 - 08/07/17 ChoiceScript update, additional aesthetic options and a variety of additional tweaks and bug-fixes. Additions 'Night Mode' setting (allows selection of a dark UI theme) Tab order is now both sortable and persistent across sessions Additional (temporary) editor window themes Option to select font-family used by the editor window New level of update channel which allows quick access to future (untested) updates Support for select/dropdown settings Vastly increased unicode support / latin alphabet word recognition Added a slight scale animation when hovering over colour selectors Added support for 'warning' type notifications Fixes Incorrect variable referenced in FG's Basic's Tutorial Fixed *sound command Find/Replace button text is now visible in dark themes Spell-checking will now work on words with a variety of trailing punctuation (!?:; etc.) *disable_reuse should now be highlighted correctly when used inline Fixed a bug in setVar override that allowed for rerunning of *set via showStats, in certain circumstances Changes Updated internal copy of ChoiceScript to Github commit gosub_scene params Ability to disable control flow (i.e. no forced *goto in choices) Heavily reduced help docs page load animation time Help docs body font size increased by 2px (to 14px) Modified some help docs margin values to further aid legibility Project header bars are now slightly darker than the top UI bar CSIDE will now warn users about its inability to play .mp3 files (due to legal reasons) Replace some references to deprecated NWJS APIs The CS console will now 'inherit' styling/colour theme from the code editor Simplified injection of Popout button to ChoiceScript index v1.0.1 - 14/06/17 Pre-release update. Fixes a number of minor bugs, and makes some stylistic changes. Introduces an in-app changelog, autoformat setting, support for ChoiceScript's new accessibility options and a cross-scene selected text wordcount. An updated version of the Interactive CSIDE Tutorial is also included. Due to an APPNAME change, you may also need to port your persistent data. Read on for full details. Additions In-app accessible Changelog (under help & information tab) Notification on first post-update launch, prompting user to view the changelog Via ChoiceScript's in-game menu, changing text size and background colour are now supported New Autoformat option in Settings - automatically converts -- to emdash and ... to an ellpisis Support for selected word count across all scenes (Project -> Selected Word Count) Added a help topic on Image Scenes Removals *print is no longer supported in the console *setref is no longer supported in the console (use {var} notation) Fixes Fixed an obscure bug that prevented the same scene being opened, then closed, then opened again Fixed a bug that left the name of a previously running project on the game tab after it was closed Fixed a bug that caused the help tab to be selected on double-clicking a command for help Fixed a bug preventing the Project/Scene (context) menu buttons appearing in Windows Hiding/showing panels and clicking/typing afterwards should no longer cause 'magic cursor' jumps CSIDE 'Update Available' prompts will no longer stack if left unattended Fixed an issue preventing the selection of non-root level folders in the Web version Changes APPNAME changed to CSIDE (from ChoiceScript IDE) This is likely to invalidate previous session data (settings/scene list etc.) Minor changes to the layout of the word count prompt The \"Update Channel\" setting will no longer appear on the Web version Added a slight tolerance to the file conflict check Updated Vendetta's CSIDE Tutorial to v1.01 All newly created scene names will now be forced to lowercase Console commands *untrack_all and *track_all have been renamed *track_all_on and *track_all_off HEAVILY revised documentation + proofing Removed references to \"OS X\" Renamed Mac's ALT to OPT Reworded most topics Fixed a number of spelling mistakes Reorganised home index (into basic + advanced topics) Added 'next topic' links to some topics Added additional hotlinks throughout various topics Removed mentions to Dropbox Added mentions about Dashingdon Hosting ChoiceScript's in-game menu is now functional (minus link/email options)","title":"Changelog"},{"location":"changelog.html#v131-21062019","text":"Hotfix release. Reverts atomic file writing changes from v1.3.0 due to corruption of metadata.","title":"v1.3.1 - 21/06/2019"},{"location":"changelog.html#fixes","text":"Corrupted metadata on file writes","title":"Fixes"},{"location":"changelog.html#changes","text":"File writes are no longer atomic","title":"Changes"},{"location":"changelog.html#v130-03062019","text":"Feature release focussing on user dictionary improvements and bug fixes.","title":"v1.3.0 - 03/06/2019"},{"location":"changelog.html#fixes_1","text":"Custom themes should now persist across sessions on all platforms Fixed an issue related to spellchecking words wrapped in quotation marks v1.2.1 HotFix (correctly initialize default tabs) Fixed a minor issue with Dropbox error handling CSIDE will no longer ignore the *text_image command behaviour Fixed an issue with 'stepping' being unable to handle *fake_choice Fixed disappearing window control/UI jumping bug The 'Run Project' hotkey is now documented as intended","title":"Fixes"},{"location":"changelog.html#additions","text":"User Dictionary Improvements Optimised add/remove word functionality Added support for importing/exporting JSON-esque dictionaries Added a 'Remove All' (words) button Added real-time search filter behaviour to the input box to help with navigating large dictionaries Added additional options to the indentation setting, and converted its settings control to a dropdown menu Added the line and column position of the cursor to the code editor footer Added an option to 'clear game data' to a running project's ChoiceScript menu This will allow for clearing of earned achievements etc. Added support to cycle through the current project's scenes via hotkeys Mac: Cmd+Alt+PgUp/PgDwn Windows: Ctrl+PgUp/PgDwn Added hotkeys for changing font size (ctrl/cmd[+-]) [NEEDS DOCUMENTING] Extended custom theme scripting support: Misc bug fixes and error clarifications. Adds new tokens: gutter, gutter-numbers, error-lines, cursor, matches See example project for usage! Atomic file writes (this should help combat reported file corruption)g","title":"Additions"},{"location":"changelog.html#changes_1","text":"Updated internal copy of ChoiceScript to Github commit Moved the right panel tab control to be vertical Updated the notification library: Should improve accessibility Modified appearance of notifications Turning the 'Word Count' setting off will now disable word counting rather than just hiding it (for performance reasons). Minor UI (colour) improvement for night mode's scene/project drag and drop Added a link to CSIDE's thread in the 'What is CSIDE?' documentation page","title":"Changes"},{"location":"changelog.html#v121-27122017","text":"Fixes a critical bug caused by turning persistent session 'off' when persistent tabs are supported.","title":"v1.2.1 - 27/12/2017"},{"location":"changelog.html#fixes_2","text":"default tab order is now initialized correctly when the persistent session setting is disabled","title":"Fixes"},{"location":"changelog.html#v120-18122017","text":"Feature release including custom themes, code folding and selection matching, a handful of bug fixes and some minor behaviour tweaks.","title":"v1.2.0 - 18/12/2017"},{"location":"changelog.html#additions_1","text":"Code folding/collapsing Example projects are now runnable Selection matching (highlights other instances of selected text) Custom theme scripting (and matching example project) Spellcheck now supports including/excluding of command lines Visible indentation support for spaces New shortcut combos for Delete line Duplicate line Toggle block comment","title":"Additions"},{"location":"changelog.html#fixes_3","text":"'Insert double line break' menu option now respects indentation Fixed a file path issue on attempts to open a project folder Made some changes to mitigate a possible ui/locking bug with project controls Misspelled words next to speech marks are now detected correctly","title":"Fixes"},{"location":"changelog.html#changes_2","text":"Updated internal copy of ChoiceScript to Github commit 'Untitled_X' scenes are now generated with fully lowercase names Numerous changes to spellcheck and indentation syntax implementation Editor history delay has been drastically reduced which should result in smaller/more precise undo steps Updates: Development channel warning removed Name of update channel now appears in the update title Development updates are now coloured in yellow Update channel setting now has a description","title":"Changes"},{"location":"changelog.html#removals","text":"The mixed scene indentation test performed on newly opened files has been disabled The additional temporary editor themes have been removed (in light of custom theme support) Only the Light, Dark and Dichromatic themes will be supported going forward Users who's config points to removed themes will be set back to the Light theme","title":"Removals"},{"location":"changelog.html#v112-7102017","text":"Includes a permission issue fix (from v1.1.1), some changes to support updates on Linux, and the latest copy of ChoiceScript.","title":"v1.1.2 - 7/10/2017"},{"location":"changelog.html#additions_2","text":"Basic support for updates on Linux(esque) machines","title":"Additions"},{"location":"changelog.html#fixes_4","text":"Fixes deleting (moving files to Trash) on MAC","title":"Fixes"},{"location":"changelog.html#changes_3","text":"Updated internal copy of ChoiceScript to Github commit","title":"Changes"},{"location":"changelog.html#v111-01102017","text":"ChoiceScript update, package (update) size reduction and an aesthetic bug fix.","title":"v1.1.1 - 01/10/2017"},{"location":"changelog.html#fixes_5","text":"Fixed out of sync scenes/projects panel animation","title":"Fixes"},{"location":"changelog.html#changes_4","text":"Updated internal copy of ChoiceScript to Github commit Fixed issues with the build process that caused updates to be unnecessarily large Updates will be smaller Application should also open more quickly","title":"Changes"},{"location":"changelog.html#v110-080717","text":"ChoiceScript update, additional aesthetic options and a variety of additional tweaks and bug-fixes.","title":"v1.1.0 - 08/07/17"},{"location":"changelog.html#additions_3","text":"'Night Mode' setting (allows selection of a dark UI theme) Tab order is now both sortable and persistent across sessions Additional (temporary) editor window themes Option to select font-family used by the editor window New level of update channel which allows quick access to future (untested) updates Support for select/dropdown settings Vastly increased unicode support / latin alphabet word recognition Added a slight scale animation when hovering over colour selectors Added support for 'warning' type notifications","title":"Additions"},{"location":"changelog.html#fixes_6","text":"Incorrect variable referenced in FG's Basic's Tutorial Fixed *sound command Find/Replace button text is now visible in dark themes Spell-checking will now work on words with a variety of trailing punctuation (!?:; etc.) *disable_reuse should now be highlighted correctly when used inline Fixed a bug in setVar override that allowed for rerunning of *set via showStats, in certain circumstances","title":"Fixes"},{"location":"changelog.html#changes_5","text":"Updated internal copy of ChoiceScript to Github commit gosub_scene params Ability to disable control flow (i.e. no forced *goto in choices) Heavily reduced help docs page load animation time Help docs body font size increased by 2px (to 14px) Modified some help docs margin values to further aid legibility Project header bars are now slightly darker than the top UI bar CSIDE will now warn users about its inability to play .mp3 files (due to legal reasons) Replace some references to deprecated NWJS APIs The CS console will now 'inherit' styling/colour theme from the code editor Simplified injection of Popout button to ChoiceScript index","title":"Changes"},{"location":"changelog.html#v101-140617","text":"Pre-release update. Fixes a number of minor bugs, and makes some stylistic changes. Introduces an in-app changelog, autoformat setting, support for ChoiceScript's new accessibility options and a cross-scene selected text wordcount. An updated version of the Interactive CSIDE Tutorial is also included. Due to an APPNAME change, you may also need to port your persistent data. Read on for full details.","title":"v1.0.1 - 14/06/17"},{"location":"changelog.html#additions_4","text":"In-app accessible Changelog (under help & information tab) Notification on first post-update launch, prompting user to view the changelog Via ChoiceScript's in-game menu, changing text size and background colour are now supported New Autoformat option in Settings - automatically converts -- to emdash and ... to an ellpisis Support for selected word count across all scenes (Project -> Selected Word Count) Added a help topic on Image Scenes","title":"Additions"},{"location":"changelog.html#removals_1","text":"*print is no longer supported in the console *setref is no longer supported in the console (use {var} notation)","title":"Removals"},{"location":"changelog.html#fixes_7","text":"Fixed an obscure bug that prevented the same scene being opened, then closed, then opened again Fixed a bug that left the name of a previously running project on the game tab after it was closed Fixed a bug that caused the help tab to be selected on double-clicking a command for help Fixed a bug preventing the Project/Scene (context) menu buttons appearing in Windows Hiding/showing panels and clicking/typing afterwards should no longer cause 'magic cursor' jumps CSIDE 'Update Available' prompts will no longer stack if left unattended Fixed an issue preventing the selection of non-root level folders in the Web version","title":"Fixes"},{"location":"changelog.html#changes_6","text":"APPNAME changed to CSIDE (from ChoiceScript IDE) This is likely to invalidate previous session data (settings/scene list etc.) Minor changes to the layout of the word count prompt The \"Update Channel\" setting will no longer appear on the Web version Added a slight tolerance to the file conflict check Updated Vendetta's CSIDE Tutorial to v1.01 All newly created scene names will now be forced to lowercase Console commands *untrack_all and *track_all have been renamed *track_all_on and *track_all_off HEAVILY revised documentation + proofing Removed references to \"OS X\" Renamed Mac's ALT to OPT Reworded most topics Fixed a number of spelling mistakes Reorganised home index (into basic + advanced topics) Added 'next topic' links to some topics Added additional hotlinks throughout various topics Removed mentions to Dropbox Added mentions about Dashingdon Hosting ChoiceScript's in-game menu is now functional (minus link/email options)","title":"Changes"},{"location":"terms-and-conditions.html","text":"CAREFULLY READ THE FOLLOWING TERMS AND CONDITIONS BEFORE USING THIS SOFTWARE. BY USING THIS FREEWARE VERSION, YOU ACKNOWLEDGE THAT YOU HAVE READ THIS LIMITED WARRANTY, UNDERSTAND IT, AND AGREE TO BE BOUND BY ITS TERMS AND CONDITIONS. YOU ALSO AGREE THAT UNLESS YOU HAVE A DIFFERENT LICENSE AGREEMENT SIGNED BY CAREY J. WILLIAMS, YOUR USE OF THIS SOFTWARE INDICATES YOUR ACCEPTANCE OF THIS LICENSE AGREEMENT AND WARRANTY. IF YOU DO NOT AGREE TO THE TERMS OF THIS AGREEMENT, DELETE THE SOFTWARE FROM ALL STORAGE MEDIA. License This Freeware License Agreement (the \"Agreement\") is a legal agreement between you (the \"Licensee\"), the end-user, and Carey J. Williams (the \"Author\") for the free use of this software product (the \"Software\"). Commercial as well as non-commercial use is allowed. By using this Software or storing this program or parts of it on a computer hard drive or other media you agree to be bound by the terms of this Agreement. You may not alter this Software in any way. You may not modify, rent, or sell this Software, or create derivative works based upon this Software. Governing Law This agreement shall be governed by the laws of Great Britain. If any portion of this Agreement is deemed unenforceable by a court of competent jurisdiction, it shall not affect the enforceability of any other portion of this Agreement. Limited Warranty and Disclaimer of Warranty THE AUTHOR EXPRESSLY DISCLAIMS ANY WARRANTY FOR THE SOFTWARE. THIS SOFTWARE AND THE ACCOMPANYING FILES ARE PROVIDED \"AS IS\" AND WITHOUT WARRANTIES AS TO PERFORMANCE OR ANY OTHER WARRANTIES WHETHER EXPRESSED OR IMPLIED. In no event shall the Author be liable for any consequential, incidental, or indirect damages whatsoever (including, without limitation, damages for loss of business profits, business interruption, loss of business information, or any other pecuniary loss) resulting from the use of or inability to use this software, even if the Author has been advised of the possibility of such damages. The entire risk resulting of use or performance of the software remains with the Licensee.","title":"Terms and conditions"},{"location":"terms-and-conditions.html#license","text":"This Freeware License Agreement (the \"Agreement\") is a legal agreement between you (the \"Licensee\"), the end-user, and Carey J. Williams (the \"Author\") for the free use of this software product (the \"Software\"). Commercial as well as non-commercial use is allowed. By using this Software or storing this program or parts of it on a computer hard drive or other media you agree to be bound by the terms of this Agreement. You may not alter this Software in any way. You may not modify, rent, or sell this Software, or create derivative works based upon this Software.","title":"License"},{"location":"terms-and-conditions.html#governing-law","text":"This agreement shall be governed by the laws of Great Britain. If any portion of this Agreement is deemed unenforceable by a court of competent jurisdiction, it shall not affect the enforceability of any other portion of this Agreement.","title":"Governing Law"},{"location":"terms-and-conditions.html#limited-warranty-and-disclaimer-of-warranty","text":"THE AUTHOR EXPRESSLY DISCLAIMS ANY WARRANTY FOR THE SOFTWARE. THIS SOFTWARE AND THE ACCOMPANYING FILES ARE PROVIDED \"AS IS\" AND WITHOUT WARRANTIES AS TO PERFORMANCE OR ANY OTHER WARRANTIES WHETHER EXPRESSED OR IMPLIED. In no event shall the Author be liable for any consequential, incidental, or indirect damages whatsoever (including, without limitation, damages for loss of business profits, business interruption, loss of business information, or any other pecuniary loss) resulting from the use of or inability to use this software, even if the Author has been advised of the possibility of such damages. The entire risk resulting of use or performance of the software remains with the Licensee.","title":"Limited Warranty and Disclaimer of Warranty"},{"location":"getting-started/adding-scenes.html","text":"Mandatory Scenes All ChoiceScript games have two mandatory scenes: the 'startup' scene and the 'choicescript_stats' scene. CSIDE creates these two scenes for you automatically whenever you start a new project; then you're free to add as many more scenes as you like. How to Add Scenes To add a new scene to your project, click the '+' icon on that project's header bar. This will create and open a new 'untitled' scene file, and automatically save it into the new project's folder. You can rename your additional scene files at any time by double-clicking them. If you already have a scene file selected, a single click will let you rename it. You cannot rename or delete, the two compulsory ChoiceScript files ('startup' and 'choicescript_stats'). Scene Limitations & Structure There is no technical limit on the number of scenes you can create. However, it is important to find a good balance between scene quantity, length, and overall game structure. If this is your first foray into developing ChoiceScript games, there are a couple of older but very useful articles which can give you some pointers for planning your game's design: How to plan a ChoiceScript game Vignette (scene) Structure Next Topic : Keyboard Shortcuts","title":"Adding scenes"},{"location":"getting-started/adding-scenes.html#mandatory-scenes","text":"All ChoiceScript games have two mandatory scenes: the 'startup' scene and the 'choicescript_stats' scene. CSIDE creates these two scenes for you automatically whenever you start a new project; then you're free to add as many more scenes as you like.","title":"Mandatory Scenes"},{"location":"getting-started/adding-scenes.html#how-to-add-scenes","text":"To add a new scene to your project, click the '+' icon on that project's header bar. This will create and open a new 'untitled' scene file, and automatically save it into the new project's folder. You can rename your additional scene files at any time by double-clicking them. If you already have a scene file selected, a single click will let you rename it. You cannot rename or delete, the two compulsory ChoiceScript files ('startup' and 'choicescript_stats').","title":"How to Add Scenes"},{"location":"getting-started/adding-scenes.html#scene-limitations-structure","text":"There is no technical limit on the number of scenes you can create. However, it is important to find a good balance between scene quantity, length, and overall game structure. If this is your first foray into developing ChoiceScript games, there are a couple of older but very useful articles which can give you some pointers for planning your game's design: How to plan a ChoiceScript game Vignette (scene) Structure Next Topic : Keyboard Shortcuts","title":"Scene Limitations &amp; Structure"},{"location":"getting-started/creating-projects.html","text":"CSIDE can create a new, blank project or import a previous project from your existing scene files. In this context, 'import' means CSIDE is opening your individual .txt files for modification, just like any other text editor. We use the word 'import' because it makes the most sense in terms of running or testing projects. Creating a New Project To create a new project, click the button with a '+' icon alongside the 'Scenes & Projects' header near the top left of the window. You will be prompted to enter a name for the new project. You are free to name it whatever you like, but it's probably a good idea to use something similar to your game's title. This name will also be used for the folder on your hard drive where the project's scene files are stored. If the name is valid, CSIDE will create a new folder for you. A confirmation message pops up, displaying the full directory path of your project. The default path looks something like this: Windows - C:\\Users\\Username\\Documents\\ChoiceScript Projects\\My Project Name Mac - /Users/Username/ChoiceScript Projects/My Project Name The default folder location (.../ChoiceScript Projects/) can be changed in the Settings tab. A new project always contains the two compulsory files required for every ChoiceScript game: 'startup' and 'choicescript_stats'. Additional scene files can be added to your new project as needed. Importing an Existing Project If you already have a ChoiceScript game in development, it's easy to import it and continue working on your project within CSIDE. For the most part, projects are handled automatically. All you have to do is click the button with a folder icon alongside the Scenes & Projects header. Select the .txt (scene) game files you wish to open, and CSIDE will open the files and assign them to a new CSIDE project for you. Note that the import procedure does not in any way copy or move your existing game files from their current folder and directory. Instead, future edits to that project within CSIDE will directly overwrite those exact same scene files\u2014just as if you had opened them with an ordinary text editor. If you do not want CSIDE to edit your original files, you can use the Export function to save a copy of your project to a different folder. The export and close options are available by right-clicking the project header bar, or by selecting any file from that project and clicking the folder button (Project menu) at the very top-left of the screen (see the native app bar on Mac). Then simply close the original project and import (open) your copy from the new save location instead. You can also create a new project and copy the scenes from your original location by dragging and dropping your selected scenes from the old project to the new, and selecting 'copy' when prompted. Next Topic : Adding Scenes","title":"Creating or Importing a Project"},{"location":"getting-started/creating-projects.html#creating-a-new-project","text":"To create a new project, click the button with a '+' icon alongside the 'Scenes & Projects' header near the top left of the window. You will be prompted to enter a name for the new project. You are free to name it whatever you like, but it's probably a good idea to use something similar to your game's title. This name will also be used for the folder on your hard drive where the project's scene files are stored. If the name is valid, CSIDE will create a new folder for you. A confirmation message pops up, displaying the full directory path of your project. The default path looks something like this: Windows - C:\\Users\\Username\\Documents\\ChoiceScript Projects\\My Project Name Mac - /Users/Username/ChoiceScript Projects/My Project Name The default folder location (.../ChoiceScript Projects/) can be changed in the Settings tab. A new project always contains the two compulsory files required for every ChoiceScript game: 'startup' and 'choicescript_stats'. Additional scene files can be added to your new project as needed.","title":"Creating a New Project"},{"location":"getting-started/creating-projects.html#importing-an-existing-project","text":"If you already have a ChoiceScript game in development, it's easy to import it and continue working on your project within CSIDE. For the most part, projects are handled automatically. All you have to do is click the button with a folder icon alongside the Scenes & Projects header. Select the .txt (scene) game files you wish to open, and CSIDE will open the files and assign them to a new CSIDE project for you. Note that the import procedure does not in any way copy or move your existing game files from their current folder and directory. Instead, future edits to that project within CSIDE will directly overwrite those exact same scene files\u2014just as if you had opened them with an ordinary text editor. If you do not want CSIDE to edit your original files, you can use the Export function to save a copy of your project to a different folder. The export and close options are available by right-clicking the project header bar, or by selecting any file from that project and clicking the folder button (Project menu) at the very top-left of the screen (see the native app bar on Mac). Then simply close the original project and import (open) your copy from the new save location instead. You can also create a new project and copy the scenes from your original location by dragging and dropping your selected scenes from the old project to the new, and selecting 'copy' when prompted. Next Topic : Adding Scenes","title":"Importing an Existing Project"},{"location":"getting-started/setting-up.html","text":"CSIDE is designed to aid and accommodate a variety of users, from the least to the most experienced. The configurable settings let you tailor the application to suit your own needs and writing style. The Settings Tab can be accessed at any time by selecting the tab with the cog/gear icon. Any changes made to the Settings will take effect immediately, and will persist between sessions (if the appropriate 'persistent session' setting is on). By default, your settings will persist between sessions and even future application updates, as long as you're using the same computer and copy of the application. We suggest taking a look through the settings to get a feel for how the application can best accommodate your personal preferences. It's like anything else: what works for us won't necessarily work for you. If you find you're unsure of where to start, try taking the default settings for a spin. You can always tweak them over time until you're completely happy with CSIDE's appearance and functionality. If you're a relative newcomer to either ChoiceScript or CSIDE, or if you're just in need of a refresh, you can use the Interactive CSIDE Tutorial included under the Example Projects Tab (Desktop only). The Tutorial, which is written in ChoiceScript, will guide you through the process of setting up your own project in CSIDE. The Tutorial also explains, in step-by-step detail, everything you need to learn about the basics of ChoiceScript in order to create your own ChoiceScript game. If you wish to use the Interactive CSIDE Tutorial, you'll need to import it using the button labeled 'Import Project'. After prompting you for a new project name, CSIDE will automatically create a new project in CSIDE containing the Tutorial's scene files. Once installed, click 'Run this project' on the project's header bar to launch the Tutorial. You can also check out the Further Reading section for links to other useful guides, tutorials, and more. Next Topic : Creating or Importing a Project","title":"Setting up"},{"location":"getting-started/user-interface.html","text":"Overview CSIDE provides a clean and intuitive user interface; every feature and function is just a few clicks away. The main display has three panels: Scenes and Projects, the Editor Window, and the Tabs Panel. In the leftmost panel are one or more Game Projects, each with its own group of named scene files. New projects can be created from scratch, or imported from existing game files. The individual scene files can be moved or copied between different projects by dragging and dropping them. The list order for scenes or projects can be rearranged in the same way. Selecting a scene file displays its contents in the Code Editor, which is in the centre panel. The Code Editor is a fully functional text editor; it features automatic spell checking (US or UK, plus a User Dictionary), handy code highlighting, multiple hotkeys for ease of use, and a powerful Smart Indentation function to streamline your game scripting. The tabs in the rightmost panel give you one-click access to various program features. The first is the all-important Game Tab, for running, testing, and fine-tuning your project during game development. Then there are Issues, for debugging your game; User Settings, for personalising CSIDE for your use; Help and Information; the User Dictionary; and Example Projects and Templates, including templates with tutorials in ChoiceScript. Beneath the Code Editor is the CSIDE Console (click the >_ icon to open/close), a versatile monitoring and debugging tool with a variety of uses. It works closely with the Game Tab panel to help you track down elusive bugs, or test and balance your code. And that's only the tip of the iceberg! But not to worry; CSIDE is designed from the ground up to be exactly as helpful and unobtrusive as you need it to be. If anything sounds daunting, you can ignore it and stick to the Code Editor and Game Tab for your first game. Use what is comfortable for you, and feel free to come back and try out other features at a later date. Usability Tips CSIDE's user interface has been designed with today's widescreen monitors in mind. However, for smaller screens, you can hide the Scenes and Projects (leftmost panel) and Tab Topics (rightmost panel) via sliders. Just use the <-> buttons above the respective top corners of the Code Editor window. Desktop Versions Only : Double-clicking the CSIDE main header bar toggles between your normal window size and position, and maximised (Windows) or full screen (Mac). For extended periods of intensive work, you may find it more comfortable to resize the CSIDE window and position it in the middle of your screen. You can hide the Tabs Panel, the Scenes and Projects Panel, or both while you're focusing on the editor window. Then, when you're ready to run a play-test game or you need to switch scenes or access another tab, you can easily toggle back to full screen/maximised mode and slide open the relevant panel. You can also press Escape to toggle back and forth from the panel view and a Code Editor window only view. Next Topic : Setting Up","title":"User interface"},{"location":"getting-started/user-interface.html#overview","text":"CSIDE provides a clean and intuitive user interface; every feature and function is just a few clicks away. The main display has three panels: Scenes and Projects, the Editor Window, and the Tabs Panel. In the leftmost panel are one or more Game Projects, each with its own group of named scene files. New projects can be created from scratch, or imported from existing game files. The individual scene files can be moved or copied between different projects by dragging and dropping them. The list order for scenes or projects can be rearranged in the same way. Selecting a scene file displays its contents in the Code Editor, which is in the centre panel. The Code Editor is a fully functional text editor; it features automatic spell checking (US or UK, plus a User Dictionary), handy code highlighting, multiple hotkeys for ease of use, and a powerful Smart Indentation function to streamline your game scripting. The tabs in the rightmost panel give you one-click access to various program features. The first is the all-important Game Tab, for running, testing, and fine-tuning your project during game development. Then there are Issues, for debugging your game; User Settings, for personalising CSIDE for your use; Help and Information; the User Dictionary; and Example Projects and Templates, including templates with tutorials in ChoiceScript. Beneath the Code Editor is the CSIDE Console (click the >_ icon to open/close), a versatile monitoring and debugging tool with a variety of uses. It works closely with the Game Tab panel to help you track down elusive bugs, or test and balance your code. And that's only the tip of the iceberg! But not to worry; CSIDE is designed from the ground up to be exactly as helpful and unobtrusive as you need it to be. If anything sounds daunting, you can ignore it and stick to the Code Editor and Game Tab for your first game. Use what is comfortable for you, and feel free to come back and try out other features at a later date.","title":"Overview"},{"location":"getting-started/user-interface.html#usability-tips","text":"CSIDE's user interface has been designed with today's widescreen monitors in mind. However, for smaller screens, you can hide the Scenes and Projects (leftmost panel) and Tab Topics (rightmost panel) via sliders. Just use the <-> buttons above the respective top corners of the Code Editor window. Desktop Versions Only : Double-clicking the CSIDE main header bar toggles between your normal window size and position, and maximised (Windows) or full screen (Mac). For extended periods of intensive work, you may find it more comfortable to resize the CSIDE window and position it in the middle of your screen. You can hide the Tabs Panel, the Scenes and Projects Panel, or both while you're focusing on the editor window. Then, when you're ready to run a play-test game or you need to switch scenes or access another tab, you can easily toggle back to full screen/maximised mode and slide open the relevant panel. You can also press Escape to toggle back and forth from the panel view and a Code Editor window only view. Next Topic : Setting Up","title":"Usability Tips"},{"location":"getting-started/what-is-cside.html","text":"CSIDE (the ChoiceScript Integrated Development Environment) is just that\u2014an integrated development environment for the ChoiceScript scripting language. What does that mean? Don't worry; we promise it's not complicated. Basically, CSIDE is a piece of software (a computer application) that is designed to provide you with all the tools you need to develop interactive fiction games with ChoiceScript. CSIDE provides a way to manage your files, write your stories, and test your game scripting, all in one neat package! It includes features designed to streamline the entire creation process and take out every possible hardship or chore, leaving only the fun bits for you. From the second your fingers first touch the keyboard to the moment you're finally ready to click 'Export' and publish that blockbuster game, CSIDE is here to help you on every step of the way. So I need to be a programmer to use this, huh? Absolutely not! Most ChoiceScript authors have little or no programming experience, only passion and skill in writing great stories. CSIDE is designed with writers in mind, in order to make learning and using ChoiceScript an easy, satisfying experience. Really? I dunno... If you're still uncertain, or if you aren't sure what ChoiceScript is, check out the website of its creators: Choice of Games LLC . Try playing some of the free games or trial chapters, developed by people just like you using ChoiceScript. Once you've seen what ChoiceScript is, and what interactive fiction authors can use it to do, we're confident this will all make a lot more sense! If you have any questions or comments, feel free to visit CSIDE's thread on the Choice of Games forums and chat with CSIDE's team. We'd love to hear from you! Happy scripting! \u2014 The CSIDE Team Next Topic : User Interface Overview","title":"What is CSIDE?"},{"location":"getting-started/what-is-cside.html#what-does-that-mean","text":"Don't worry; we promise it's not complicated. Basically, CSIDE is a piece of software (a computer application) that is designed to provide you with all the tools you need to develop interactive fiction games with ChoiceScript. CSIDE provides a way to manage your files, write your stories, and test your game scripting, all in one neat package! It includes features designed to streamline the entire creation process and take out every possible hardship or chore, leaving only the fun bits for you. From the second your fingers first touch the keyboard to the moment you're finally ready to click 'Export' and publish that blockbuster game, CSIDE is here to help you on every step of the way.","title":"What does that mean?"},{"location":"getting-started/what-is-cside.html#so-i-need-to-be-a-programmer-to-use-this-huh","text":"Absolutely not! Most ChoiceScript authors have little or no programming experience, only passion and skill in writing great stories. CSIDE is designed with writers in mind, in order to make learning and using ChoiceScript an easy, satisfying experience.","title":"So I need to be a programmer to use this, huh?"},{"location":"getting-started/what-is-cside.html#really-i-dunno","text":"If you're still uncertain, or if you aren't sure what ChoiceScript is, check out the website of its creators: Choice of Games LLC . Try playing some of the free games or trial chapters, developed by people just like you using ChoiceScript. Once you've seen what ChoiceScript is, and what interactive fiction authors can use it to do, we're confident this will all make a lot more sense! If you have any questions or comments, feel free to visit CSIDE's thread on the Choice of Games forums and chat with CSIDE's team. We'd love to hear from you! Happy scripting! \u2014 The CSIDE Team Next Topic : User Interface Overview","title":"Really? I dunno..."},{"location":"topics/about.html","text":"The Choicescript Integrated Development Environment (CSIDE) is a piece of software designed to aid people in developing interactive novels (or games) using the ChoiceScript scripting language, developed by Dan Fabulich of Choice of Games LLC. CSIDE is a third-party product developed independently by CJW (of the CoG Forums); it is maintained and supported by volunteers known as 'The CSIDE Team'. IN NO WAY is CSIDE officially endorsed by, or representative of, Choice of Games LLC. ChoiceScript is \u00a9 Dan Fabulich. If you have any comments, questions, suggestions, or bug reports, please check out the discussion thread on the Choice of Games forums. We love feedback! You're also welcome to email us: cside@mazdrak.com Like What You See? Please help us spread the word about ChoiceScript, Choice of Games LLC, and CSIDE. Tweet #Choicescript @ChoicescriptIDE","title":"About"},{"location":"topics/about.html#like-what-you-see","text":"Please help us spread the word about ChoiceScript, Choice of Games LLC, and CSIDE. Tweet #Choicescript @ChoicescriptIDE","title":"Like What You See?"},{"location":"topics/code-editor.html","text":"The Code Editor is the 'business end' of CSIDE, where you'll be creating your game. It combines the most useful functions of standard text editors with unique features designed specifically for ChoiceScript writers. Many of the Settings in CSIDE are directly related to the functionality and appearance of the Code Editor. If a particular feature does not appear to be working for you as described, check your Settings to confirm that feature is enabled. General Functionality Editor Display : Selecting a scene from the Scenes & Projects Panel displays the contents of that file in the Code Editor. The current project and scene name will appear on the header bar at the top of the Editor. Hotkeys : The Code Editor is a fully functional text editor with standard keyboard shortcuts enabled, for instance: undo, select, cut, paste, and more. A full list of keyboard shortcuts can be found here . Resizing : Clicking the double arrow icons above the top two corners of the Code Editor window toggle the adjoining Scenes & Projects Panel or Tab Panel open or closed. This enlarges the Editor window, allowing for more working space. Full Window : The ESC key (or F11) provides a handy 'full-window' on/off toggle for the Code Editor. This temporarily removes the Scenes & Projects and Tab Panels and all headers from view. The Code Editor must be in focus (that is, with a blinking text cursor) in order to use the full-window toggle. Auto Line-Wrapping : When enabled in Settings, the Code Editor will automatically wrap longer lines, such as narrative paragraphs, to fit the display width of the editor. The line wrap will automatically adjust if the editor window is resized. Spellchecking : CSIDE offers US and UK dictionaries in Settings. Words underlined in red in the Code Editor window indicate that those words are not in the current dictionary nor the User Dictionary. Right-clicking on an underlined word presents a menu with options to choose an alternative spelling, ignore the spelling for the current session, or add the word to the User Dictionary. The User Dictionary is accessible through the Tabs Panel . It is possible to both manually add and remove words via the dictionary's interface. Any words added to the User Dictionary will not be underlined as misspellings in the Code Editor. For more information, please see the User Dictionary tab . Code Highlighting : The Code Editor incorporates automatic colour-coded highlighting of ChoiceScript commands. This highlighting helps distinguish between script and narrative at a glance; it also makes possible coding errors and typos immediately obvious. For instance, *page_break will change colour the instant the command is completed, but only when spelled correctly and recognised as a legitimate command. Each category of code\u2014#options, *set/{variable}, *goto/*label, and *comment\u2014is highlighted in a different colour for ease of differentiation. It is not possible to change the highlighting colours used, but they do vary according to the Dark, Light, or Dichromatic Code Editor themes (selectable in Settings ). Command Help : When enabled under Settings, double-clicking a legitimate ChoiceScript command typed in the Code Editor (for instance, *choice) opens your default browser and automatically navigates to the Help page for that command on the ChoiceScriptDev Wikia . If your default browser is already running in the background, the Help page will load in a new tab. Text Formatting : ChoiceScript supports both bold and italic formatting, using start and end tags in the game files to mark formatted words or phrases. The CTRL-I and CTRL-B hotkeys (CMD-I and CMD-B) will wrap selected text with the formatting tags for italics and bold, respectively. If no text is currently selected, the hotkeys place the start and end tags on either side of the cursor. You can also quickly remove matching tags by repeating the same process. Displaying Variables in Narrative : Using CTRL-D/CMD-D wraps the selected text with the scripting to display a variable's value. If no text is currently selected, the hotkeys place the start and end braces on either side of the cursor. Tab Indentation : Indentation in ChoiceScript uses either spaces or tabs. The default indentation can be changed in Settings . In addition when using spaces, pressing the TAB key will insert the correct number of spaces for a single indentation level (2, 4, 6, or 8). SHIFT-TAB will dedent by one level. TAB and SHIFT-TAB also work with selected blocks of text. Smart Indentation : This optional function streamlines game scripting by automatically indenting\u2014and where possible, also dedenting\u2014according to ChoiceScript's requirements. When Smart Indentation is active, the Code Editor will move the cursor to the correct indentation on each new line. Holding down SHIFT while pressing ENTER temporarily overrides Smart Indentation, placing the cursor at the very start of the next line. Although Smart Indentation is especially useful for new authors who are still learning ChoiceScript's indentation hierarchy, we encourage experienced ChoiceScript coders to give this function a try. It is our belief that most users can easily adjust to this simpler, more streamlined method of coding and, over time, will find it to be a distinct benefit for ease of coding and reduction of casual indentation errors. Block Selection A number of Code Editor features work well when using Block Selection (i.e. when selecting multiple lines of code or narrative using the mouse or SHIFT-UP/DOWN). Automatic Word Count : When activated under Settings, the bar immediately below the Code Editor displays the word count of the selected block, or the word count of the entire scene if no text is selected. This can include or exclude command lines according to the preference indicated in Settings. Review - Word Count : Selecting 'Review - Word Count' from the context menu of the active scene will also detail the word count of any selected text in that scene. Text Formatting : The CTRL-I or CTRL-B hotkeys (CMD-I or CMD-B) apply start and end formatting tags for italics or bold to all selected lines. The formatting will automatically exclude *command and #option lines, and then #option text can be individually formatted if desired. Block Indent/Dedent : The TAB/SHIFT-TAB keys automatically indent or dedent all selected text by one level. Block Move : CTRL-SHIFT-UP/DOWN moves an entire block of text up or down by one line at a time. This essentially achieves the same effect as cutting and pasting, but it allows for more fluid and efficient local editing, especially when used in combination with block indent/dedent. Block Comment : Toggles selected text to or from *comment mode by adding *comment at the beginning of each selected line. Right-click in the numbered line area of the Code Editor and select 'Toggle Block Comment' to use. This is especially useful for testing, debugging, and publishing purposes; it's a quick and simple way to temporarily disable an entire block of code prior to running a game test. It can also be useful for hiding in-progress material when sharing beta versions of the game. Stats Listing : Typing a list of variable names, selecting them all, and hitting CTRL-D/CMD-D will wrap each individual variable name with the scripting to display its value, while ignoring any command lines (e.g. *line_break) included in the selection block. The 'stats listing' function is particularly useful when building or editing the Stats Screen. Code Editor Context Menu Right-clicking in a blank section of the Code Editor will open a context menu with additional options, primarily offering mouse alternatives to standard keyboard shortcuts such as cut, copy, and paste. However, there are two additional options not currently accessible through other means: Insert Double Line Break : Inserts two successive *line_break commands with a single click, causing ChoiceScript to insert a completely blank line in-game at this point. For preserving spacing in *if statements, #option sequences, and so forth, a blank line followed by *comment end_if is recommended instead. This informs editors or proofreaders of the author's intentions with paragraph and line layouts. Toggle Block Comment : See 'Block Comment' in the section above. Multiple Cursors New text cursors can be created by holding down CTRL/CMD and clicking on a new location in the editor. When typing or navigating through the Code Editor, all cursor points will move and receive keyboard input. This allows for easy multi-line deletion, quick creation of commonly-named variables, selecting and moving several disparate sections of text, etc.. Clicking anywhere in the editor without holding down CTRL/CMD will remove all additional cursors. Individual cursors can be removed by CTRL/CMD clicking within the line in which the cursor currently resides. Code Editor Usability Tip Double-clicking the CSIDE main header bar toggles between your normal window size and position and fullscreen mode. For widescreen users, it may be more comfortable to resize or position the CSIDE window in the middle of the screen when using the Code Editor. Then you can slide the Tabs Panel out of view, focusing on the Code Editor, with the Scenes & Projects Panel open for ease of switching between files. Then if you want to run a play-test game or access Help files, simply toggle back to Full Screen and slide open the Tabs panel. Next Topic : Tab Panels","title":"Code editor"},{"location":"topics/code-editor.html#general-functionality","text":"Editor Display : Selecting a scene from the Scenes & Projects Panel displays the contents of that file in the Code Editor. The current project and scene name will appear on the header bar at the top of the Editor. Hotkeys : The Code Editor is a fully functional text editor with standard keyboard shortcuts enabled, for instance: undo, select, cut, paste, and more. A full list of keyboard shortcuts can be found here . Resizing : Clicking the double arrow icons above the top two corners of the Code Editor window toggle the adjoining Scenes & Projects Panel or Tab Panel open or closed. This enlarges the Editor window, allowing for more working space. Full Window : The ESC key (or F11) provides a handy 'full-window' on/off toggle for the Code Editor. This temporarily removes the Scenes & Projects and Tab Panels and all headers from view. The Code Editor must be in focus (that is, with a blinking text cursor) in order to use the full-window toggle. Auto Line-Wrapping : When enabled in Settings, the Code Editor will automatically wrap longer lines, such as narrative paragraphs, to fit the display width of the editor. The line wrap will automatically adjust if the editor window is resized. Spellchecking : CSIDE offers US and UK dictionaries in Settings. Words underlined in red in the Code Editor window indicate that those words are not in the current dictionary nor the User Dictionary. Right-clicking on an underlined word presents a menu with options to choose an alternative spelling, ignore the spelling for the current session, or add the word to the User Dictionary. The User Dictionary is accessible through the Tabs Panel . It is possible to both manually add and remove words via the dictionary's interface. Any words added to the User Dictionary will not be underlined as misspellings in the Code Editor. For more information, please see the User Dictionary tab . Code Highlighting : The Code Editor incorporates automatic colour-coded highlighting of ChoiceScript commands. This highlighting helps distinguish between script and narrative at a glance; it also makes possible coding errors and typos immediately obvious. For instance, *page_break will change colour the instant the command is completed, but only when spelled correctly and recognised as a legitimate command. Each category of code\u2014#options, *set/{variable}, *goto/*label, and *comment\u2014is highlighted in a different colour for ease of differentiation. It is not possible to change the highlighting colours used, but they do vary according to the Dark, Light, or Dichromatic Code Editor themes (selectable in Settings ). Command Help : When enabled under Settings, double-clicking a legitimate ChoiceScript command typed in the Code Editor (for instance, *choice) opens your default browser and automatically navigates to the Help page for that command on the ChoiceScriptDev Wikia . If your default browser is already running in the background, the Help page will load in a new tab. Text Formatting : ChoiceScript supports both bold and italic formatting, using start and end tags in the game files to mark formatted words or phrases. The CTRL-I and CTRL-B hotkeys (CMD-I and CMD-B) will wrap selected text with the formatting tags for italics and bold, respectively. If no text is currently selected, the hotkeys place the start and end tags on either side of the cursor. You can also quickly remove matching tags by repeating the same process. Displaying Variables in Narrative : Using CTRL-D/CMD-D wraps the selected text with the scripting to display a variable's value. If no text is currently selected, the hotkeys place the start and end braces on either side of the cursor. Tab Indentation : Indentation in ChoiceScript uses either spaces or tabs. The default indentation can be changed in Settings . In addition when using spaces, pressing the TAB key will insert the correct number of spaces for a single indentation level (2, 4, 6, or 8). SHIFT-TAB will dedent by one level. TAB and SHIFT-TAB also work with selected blocks of text. Smart Indentation : This optional function streamlines game scripting by automatically indenting\u2014and where possible, also dedenting\u2014according to ChoiceScript's requirements. When Smart Indentation is active, the Code Editor will move the cursor to the correct indentation on each new line. Holding down SHIFT while pressing ENTER temporarily overrides Smart Indentation, placing the cursor at the very start of the next line. Although Smart Indentation is especially useful for new authors who are still learning ChoiceScript's indentation hierarchy, we encourage experienced ChoiceScript coders to give this function a try. It is our belief that most users can easily adjust to this simpler, more streamlined method of coding and, over time, will find it to be a distinct benefit for ease of coding and reduction of casual indentation errors.","title":"General Functionality"},{"location":"topics/code-editor.html#block-selection","text":"A number of Code Editor features work well when using Block Selection (i.e. when selecting multiple lines of code or narrative using the mouse or SHIFT-UP/DOWN). Automatic Word Count : When activated under Settings, the bar immediately below the Code Editor displays the word count of the selected block, or the word count of the entire scene if no text is selected. This can include or exclude command lines according to the preference indicated in Settings. Review - Word Count : Selecting 'Review - Word Count' from the context menu of the active scene will also detail the word count of any selected text in that scene. Text Formatting : The CTRL-I or CTRL-B hotkeys (CMD-I or CMD-B) apply start and end formatting tags for italics or bold to all selected lines. The formatting will automatically exclude *command and #option lines, and then #option text can be individually formatted if desired. Block Indent/Dedent : The TAB/SHIFT-TAB keys automatically indent or dedent all selected text by one level. Block Move : CTRL-SHIFT-UP/DOWN moves an entire block of text up or down by one line at a time. This essentially achieves the same effect as cutting and pasting, but it allows for more fluid and efficient local editing, especially when used in combination with block indent/dedent. Block Comment : Toggles selected text to or from *comment mode by adding *comment at the beginning of each selected line. Right-click in the numbered line area of the Code Editor and select 'Toggle Block Comment' to use. This is especially useful for testing, debugging, and publishing purposes; it's a quick and simple way to temporarily disable an entire block of code prior to running a game test. It can also be useful for hiding in-progress material when sharing beta versions of the game. Stats Listing : Typing a list of variable names, selecting them all, and hitting CTRL-D/CMD-D will wrap each individual variable name with the scripting to display its value, while ignoring any command lines (e.g. *line_break) included in the selection block. The 'stats listing' function is particularly useful when building or editing the Stats Screen.","title":"Block Selection"},{"location":"topics/code-editor.html#code-editor-context-menu","text":"Right-clicking in a blank section of the Code Editor will open a context menu with additional options, primarily offering mouse alternatives to standard keyboard shortcuts such as cut, copy, and paste. However, there are two additional options not currently accessible through other means: Insert Double Line Break : Inserts two successive *line_break commands with a single click, causing ChoiceScript to insert a completely blank line in-game at this point. For preserving spacing in *if statements, #option sequences, and so forth, a blank line followed by *comment end_if is recommended instead. This informs editors or proofreaders of the author's intentions with paragraph and line layouts. Toggle Block Comment : See 'Block Comment' in the section above.","title":"Code Editor Context Menu"},{"location":"topics/code-editor.html#multiple-cursors","text":"New text cursors can be created by holding down CTRL/CMD and clicking on a new location in the editor. When typing or navigating through the Code Editor, all cursor points will move and receive keyboard input. This allows for easy multi-line deletion, quick creation of commonly-named variables, selecting and moving several disparate sections of text, etc.. Clicking anywhere in the editor without holding down CTRL/CMD will remove all additional cursors. Individual cursors can be removed by CTRL/CMD clicking within the line in which the cursor currently resides.","title":"Multiple Cursors"},{"location":"topics/code-editor.html#code-editor-usability-tip","text":"Double-clicking the CSIDE main header bar toggles between your normal window size and position and fullscreen mode. For widescreen users, it may be more comfortable to resize or position the CSIDE window in the middle of the screen when using the Code Editor. Then you can slide the Tabs Panel out of view, focusing on the Code Editor, with the Scenes & Projects Panel open for ease of switching between files. Then if you want to run a play-test game or access Help files, simply toggle back to Full Screen and slide open the Tabs panel. Next Topic : Tab Panels","title":"Code Editor Usability Tip"},{"location":"topics/console.html","text":"The CSIDE Console is a versatile monitoring, play-testing, and debugging tool, primarily designed to help hunt down 'logic errors' (see below) in your code. The Console, available by clicking the >_ symbol below the Editor Window, will track, log, and display the changing value of your variables in real time as you play-test your game. your game within CSIDE. What Is a Logic Error? A ChoiceScript interpretor error\u2014that's to say, the standard 'scripting bug'\u2014is a bug that always causes a game to crash at a particular point. Most of the time, locating and identify scripting bugs is a fairly straightforward task. The 'logic error' or 'game design bug' can be more elusive. Logic errors cause a game to behave strangely in a certain location, often only under particular circumstances, but they do not result in an actual game crash. This can make it much harder to isolate and understand the cause of the error, never mind fix it. Logic errors can be caused by a typo or oversight in otherwise valid syntax, such as using a 'greater than' operator instead of a 'lesser than', or using 'and' instead of 'or' between two conditions. Logic errors are often related to the current value of a variable referenced at the exact point in the game where the bug occurs. The basic idea behind the CSIDE Console tracking system is to allow you to monitor changes of specific variable values as you progress through your game. If you do find a game design bug, you can closely investigate what's happening to the variables behind the scenes, right up to that point in the game. Monitoring variable changes at every step of the way will help you find the faulty logic behind the bug. General Functionality In addition to tracking commands and variables, the Console also supports a range of additional features. You can obtain variable values, change them either directly or by using operators, and even jump to a different scene or label. Think of the Console as a textual way to directly interact with your game 'behind the scenes' in real time, as you play through it a page at a time. If you type a variable name into the Console, it returns the current value of that variable at this precise point in your play-test. This includes the values of 'hidden' variables not displayed on the stat screen. You can even use *set to overwrite or modify that value in your active game before continuing with your play-test, allowing you to avoid inconvenient restarts or experiment with variable values. The Console also supports *goto and *goto_scene to 'jump' your running play-test game to a specific point for easy, quick testing. Anything you put into the Console command line will not affect the actual scripting in your scene files. Using *set, *temp, *goto, and *rand will only change the temporary data being held in memory for the current running game, purely for play-testing and bug-hunting purposes. As you play-test your game, the Console logs entries relating to variable creation and changes in variable values. You control what the Console will log by entering instructions into the Console command line, at the bottom of the Console window. When the Console is closed, a small red indicator appears beside the icon as new entries are logged in the Console's display. Note : If you make any changes to your game files, you must run the game again before those changes are reflected in the Console, even if the changes have been saved. Reading the Logs : All variables created in the startup file are prefixed with 'stats'. Temp variables are prefixed with 'temps'. The name and line number of each value change is also logged for ease of reference. General Console Commands : The Console will accept and log any correct command; an invalid command will return an error message. The command line buffers recent entries, so mistyped commands can be quickly corrected by pressing UP, making the necessary correction, and then pressing ENTER. Recent commands can be quickly cycled through by using UP/DOWN, allowing easy re-entry of common commands. Using the *console_ Command in Game Files : For purposes of thorough repeat testing, you can also insert certain *console_ commands directly into your game's scene files. See below under 'Console Commands in Scene Files' for details. Note : Commands entered into the Console only impact the main game running in the Game Tab Panel. The Console does not affect a game running in Popout. This can be useful for comparing your current game's output against a version where you have input different variables, or made other changes via Console. Supported ChoiceScript Commands Variable : Type any valid variable name into the Console to see the variable's current value. This will also work with 'hidden' variables not displayed on the stats screen. Expression : Enter any valid ChoiceScript expression to see its current value. For example, (var1 and {var2}): If both var1 and {var2} are true, the Console would print back 'true'; if var1, {var2}, or both are false, the Console would print back 'false'. The same applies to strings: Entering firstname&(\" \"&lastname) would print out \"John Doe\" (assuming these variables existed, and were set to those values), and numbers: Entering 5+5 would print '10' back to the console. *set [variable] [value] : All *set commands valid in ChoiceScript will also work in the Console (including modifiers and complex expressions). Using *set will overwrite or otherwise modify any variable value in memory at this precise point in the play-test game. *temp [variable] [value] : Creates a temporary variable 'on the fly' while running a play-test game. Useful for tracking and testing new values without directly modifying the game's current state. Any *temp variables created in this way will be removed when the current play-test game is refreshed, if the scene is changed, or when the game has ended. *goto [label] : Jumps to a specified *label within the current scene. *goto_scene [scene] [label] : Jumps to the specified scene and label. Caution When Using *goto : Using *goto commands from the Console can lead to errors that could not exist in a standard play-through of the game. For instance, if you were to *goto a section using a specific variable before visiting the section where that variable is created or defined, the game would then crash. Use *goto and *goto_scene with caution. *rand [variable] [value1] [value2] : Generates a new random value within a specific range and assigns it to the named variable. *achieve [codename] : Activates the named achievement as if that achievement had been earned/awarded in-game. Curly brackets : Using the syntax *set {var} will indirectly refer to one variable via the value of a second variable. For instance, if the value of 'var' is \"strength\", *set {var} 5 will set the value of the variable 'strength' to 5; the value of 'var' would remain as \"strength\". *restart : Restarts the main instance of the play-test game running in the Game Tab panel, using the game version currently held in memory. Any changes to scene files will not be acknowledged, but all current Console tracking settings will be preserved. Console Tracking Commands You can use the following commands to choose which variable values the Console will log and display during play-testing. *help : Displays useful reminders for interacting with the Console. *help [command name] : Provides information about the named command. For instance, '*help track_all_on' would return information about the *track_all_on function. *clear : Wipes all current logs, clearing the Console panel. *track [var1] [var2] [var3] [etc] : Tracks the individually named variable(s), e.g. *track strength wisdom charity *untrack [var1] [var2] [var3] [etc] : Stops tracking the individually named variable(s), e.g. *untrack strength wisdom charity *untrack : Stops tracking all variables which the Console is currently set to individually track. *track_list : Lists the names and current values of all variables being individually tracked. Returns 'Empty' if no variables are currently individually tracked. *track_list [optional filter] : As above, but lists only those variables containing the filter text, e.g. stats, temps, or any combination of characters precisely matching any part of the variable name. For instance, typing '*track enemy1 enemy2 friend1' and then using '*track_list enemy' would return 'enemy1' and 'enemy2' but not 'friend1'. *track_all_on : Overrides but does not remove the individual track variable list, and logs all variable changes. *track_all_off : Turns off track_all. Individually-tracked variables will continue to be logged in the Console panel. *run : Loads and runs the currently selected project as if you had refreshed the game with the 'Run project' icon on the project header bar. Note : a fresh 'run' (for instance, after making and saving changes in one or more scene files) will deactivate the current Console tracking settings, meaning the required tracking commands must be entered again. Conversely, when restarting, either by using the *restart command in Console or clicking the 'restart' button in the Game Tab panel the game repeats from the start using the default data already held in memory. This preserves both the most recently run version of the game and the current Console tracking settings. It is also possible to make a list of variables you would like the Console to track and include that list in the text of your game. This can save considerable time and streamline repeat testing. For more information, see the section below. Using Console Commands in Scene Files You can also insert certain *console commands directly into the code of your scene files to help streamline your testing. This avoids having to manually enter the above commands into the Console each time you run the game for a new play-test. It is also useful when logging data or expressions only in a specific section of your game, such as inside a loop. The following commands may be used in the game code, and function as described above: *console_clear *console_track [var1] [var2] [etc.] *console_untrack [var1] [var2] [etc.] *console_untrack [no parameters -- untracks ALL track_list variables] *console_track_list [optional filter] *console_track_all_on *console_track_all_off *console_log [variable or expression] *console_log prints the value of a variable or valid expression into the Console at a particular point in your game. For instance, if your game reads: *console_log \"Evaluation for *if check under option 1\" *console_log (((charisma > 50) and (unrest < 50)) and (enemy_speaker < 50)) or (ally != \"Unknown\") *choice #Talk the unruly townspeople into cooperating. *if (((charisma > 50) and (unrest < 50)) and (enemy_speaker < 50)) or (ally != \"Unknown\") The townspeople are wary at first, but you talk them round and they agree to give you a horse and supplies for your journey. *goto ride_on *else The townspeople don't like you very much. They grab some pitchforks and tell you to move along\u2014so you do. *goto no_horse Assuming the first expression is true, the Console log would read: Evaluation for *if check under option 1 True Important Notes on *console_ Commands: It is possible to use *console_commands in your scene files for testing purposes within CSIDE without having to remove any of those commands from your public beta test version. This can be done by making all *console_commands conditional on a boolean variable being 'true'. When this value is 'false'\u2014the default setting for the beta test version\u2014those lines will be ignored by ChoiceScript and their presence will generate no errors. However, in order to run Quicktest or Randomtest, the *console commands must be removed, or hidden by using Find-Replace All and the *comment function. Otherwise, the automated tests will pick up *console commands as errors. We are working to address this incompatibility issue and will endeavour to keep users informed of our progress. Meanwhile, to hide *console commands, we recommend using 'Find-Replace All' to replace '*console' with '*comment console'. When you are ready to use the Console commands again, use 'Find-Replace All' to change all instances of '*comment console' back to '*console'. Still can't find that annoying bug? For those rare situations when even the standard Console log doesn't uncover the problem, you can also use the complementary Stepping function. This toggle can be turned off and on by clicking the 'Start Stepping' button on the main page of your play-test game. The Stepping function lets you 'step through' any part of your play test, one line at a time. This lets you closely analyse exactly what each line of code is doing during your play-test. Please see the Stepping topic for more details. Next Topic : Stepping Related Topics : Issues QuickTest & RandomTest Testing & Debugging","title":"Console"},{"location":"topics/console.html#what-is-a-logic-error","text":"A ChoiceScript interpretor error\u2014that's to say, the standard 'scripting bug'\u2014is a bug that always causes a game to crash at a particular point. Most of the time, locating and identify scripting bugs is a fairly straightforward task. The 'logic error' or 'game design bug' can be more elusive. Logic errors cause a game to behave strangely in a certain location, often only under particular circumstances, but they do not result in an actual game crash. This can make it much harder to isolate and understand the cause of the error, never mind fix it. Logic errors can be caused by a typo or oversight in otherwise valid syntax, such as using a 'greater than' operator instead of a 'lesser than', or using 'and' instead of 'or' between two conditions. Logic errors are often related to the current value of a variable referenced at the exact point in the game where the bug occurs. The basic idea behind the CSIDE Console tracking system is to allow you to monitor changes of specific variable values as you progress through your game. If you do find a game design bug, you can closely investigate what's happening to the variables behind the scenes, right up to that point in the game. Monitoring variable changes at every step of the way will help you find the faulty logic behind the bug.","title":"What Is a Logic Error?"},{"location":"topics/console.html#general-functionality","text":"In addition to tracking commands and variables, the Console also supports a range of additional features. You can obtain variable values, change them either directly or by using operators, and even jump to a different scene or label. Think of the Console as a textual way to directly interact with your game 'behind the scenes' in real time, as you play through it a page at a time. If you type a variable name into the Console, it returns the current value of that variable at this precise point in your play-test. This includes the values of 'hidden' variables not displayed on the stat screen. You can even use *set to overwrite or modify that value in your active game before continuing with your play-test, allowing you to avoid inconvenient restarts or experiment with variable values. The Console also supports *goto and *goto_scene to 'jump' your running play-test game to a specific point for easy, quick testing. Anything you put into the Console command line will not affect the actual scripting in your scene files. Using *set, *temp, *goto, and *rand will only change the temporary data being held in memory for the current running game, purely for play-testing and bug-hunting purposes. As you play-test your game, the Console logs entries relating to variable creation and changes in variable values. You control what the Console will log by entering instructions into the Console command line, at the bottom of the Console window. When the Console is closed, a small red indicator appears beside the icon as new entries are logged in the Console's display. Note : If you make any changes to your game files, you must run the game again before those changes are reflected in the Console, even if the changes have been saved. Reading the Logs : All variables created in the startup file are prefixed with 'stats'. Temp variables are prefixed with 'temps'. The name and line number of each value change is also logged for ease of reference. General Console Commands : The Console will accept and log any correct command; an invalid command will return an error message. The command line buffers recent entries, so mistyped commands can be quickly corrected by pressing UP, making the necessary correction, and then pressing ENTER. Recent commands can be quickly cycled through by using UP/DOWN, allowing easy re-entry of common commands. Using the *console_ Command in Game Files : For purposes of thorough repeat testing, you can also insert certain *console_ commands directly into your game's scene files. See below under 'Console Commands in Scene Files' for details. Note : Commands entered into the Console only impact the main game running in the Game Tab Panel. The Console does not affect a game running in Popout. This can be useful for comparing your current game's output against a version where you have input different variables, or made other changes via Console.","title":"General Functionality"},{"location":"topics/console.html#supported-choicescript-commands","text":"Variable : Type any valid variable name into the Console to see the variable's current value. This will also work with 'hidden' variables not displayed on the stats screen. Expression : Enter any valid ChoiceScript expression to see its current value. For example, (var1 and {var2}): If both var1 and {var2} are true, the Console would print back 'true'; if var1, {var2}, or both are false, the Console would print back 'false'. The same applies to strings: Entering firstname&(\" \"&lastname) would print out \"John Doe\" (assuming these variables existed, and were set to those values), and numbers: Entering 5+5 would print '10' back to the console. *set [variable] [value] : All *set commands valid in ChoiceScript will also work in the Console (including modifiers and complex expressions). Using *set will overwrite or otherwise modify any variable value in memory at this precise point in the play-test game. *temp [variable] [value] : Creates a temporary variable 'on the fly' while running a play-test game. Useful for tracking and testing new values without directly modifying the game's current state. Any *temp variables created in this way will be removed when the current play-test game is refreshed, if the scene is changed, or when the game has ended. *goto [label] : Jumps to a specified *label within the current scene. *goto_scene [scene] [label] : Jumps to the specified scene and label. Caution When Using *goto : Using *goto commands from the Console can lead to errors that could not exist in a standard play-through of the game. For instance, if you were to *goto a section using a specific variable before visiting the section where that variable is created or defined, the game would then crash. Use *goto and *goto_scene with caution. *rand [variable] [value1] [value2] : Generates a new random value within a specific range and assigns it to the named variable. *achieve [codename] : Activates the named achievement as if that achievement had been earned/awarded in-game. Curly brackets : Using the syntax *set {var} will indirectly refer to one variable via the value of a second variable. For instance, if the value of 'var' is \"strength\", *set {var} 5 will set the value of the variable 'strength' to 5; the value of 'var' would remain as \"strength\". *restart : Restarts the main instance of the play-test game running in the Game Tab panel, using the game version currently held in memory. Any changes to scene files will not be acknowledged, but all current Console tracking settings will be preserved.","title":"Supported ChoiceScript Commands"},{"location":"topics/console.html#console-tracking-commands","text":"You can use the following commands to choose which variable values the Console will log and display during play-testing. *help : Displays useful reminders for interacting with the Console. *help [command name] : Provides information about the named command. For instance, '*help track_all_on' would return information about the *track_all_on function. *clear : Wipes all current logs, clearing the Console panel. *track [var1] [var2] [var3] [etc] : Tracks the individually named variable(s), e.g. *track strength wisdom charity *untrack [var1] [var2] [var3] [etc] : Stops tracking the individually named variable(s), e.g. *untrack strength wisdom charity *untrack : Stops tracking all variables which the Console is currently set to individually track. *track_list : Lists the names and current values of all variables being individually tracked. Returns 'Empty' if no variables are currently individually tracked. *track_list [optional filter] : As above, but lists only those variables containing the filter text, e.g. stats, temps, or any combination of characters precisely matching any part of the variable name. For instance, typing '*track enemy1 enemy2 friend1' and then using '*track_list enemy' would return 'enemy1' and 'enemy2' but not 'friend1'. *track_all_on : Overrides but does not remove the individual track variable list, and logs all variable changes. *track_all_off : Turns off track_all. Individually-tracked variables will continue to be logged in the Console panel. *run : Loads and runs the currently selected project as if you had refreshed the game with the 'Run project' icon on the project header bar. Note : a fresh 'run' (for instance, after making and saving changes in one or more scene files) will deactivate the current Console tracking settings, meaning the required tracking commands must be entered again. Conversely, when restarting, either by using the *restart command in Console or clicking the 'restart' button in the Game Tab panel the game repeats from the start using the default data already held in memory. This preserves both the most recently run version of the game and the current Console tracking settings. It is also possible to make a list of variables you would like the Console to track and include that list in the text of your game. This can save considerable time and streamline repeat testing. For more information, see the section below.","title":"Console Tracking Commands"},{"location":"topics/console.html#using-console-commands-in-scene-files","text":"You can also insert certain *console commands directly into the code of your scene files to help streamline your testing. This avoids having to manually enter the above commands into the Console each time you run the game for a new play-test. It is also useful when logging data or expressions only in a specific section of your game, such as inside a loop. The following commands may be used in the game code, and function as described above: *console_clear *console_track [var1] [var2] [etc.] *console_untrack [var1] [var2] [etc.] *console_untrack [no parameters -- untracks ALL track_list variables] *console_track_list [optional filter] *console_track_all_on *console_track_all_off *console_log [variable or expression] *console_log prints the value of a variable or valid expression into the Console at a particular point in your game. For instance, if your game reads: *console_log \"Evaluation for *if check under option 1\" *console_log (((charisma > 50) and (unrest < 50)) and (enemy_speaker < 50)) or (ally != \"Unknown\") *choice #Talk the unruly townspeople into cooperating. *if (((charisma > 50) and (unrest < 50)) and (enemy_speaker < 50)) or (ally != \"Unknown\") The townspeople are wary at first, but you talk them round and they agree to give you a horse and supplies for your journey. *goto ride_on *else The townspeople don't like you very much. They grab some pitchforks and tell you to move along\u2014so you do. *goto no_horse Assuming the first expression is true, the Console log would read: Evaluation for *if check under option 1 True","title":"Using Console Commands in Scene Files"},{"location":"topics/console.html#important-notes-on-console_-commands","text":"It is possible to use *console_commands in your scene files for testing purposes within CSIDE without having to remove any of those commands from your public beta test version. This can be done by making all *console_commands conditional on a boolean variable being 'true'. When this value is 'false'\u2014the default setting for the beta test version\u2014those lines will be ignored by ChoiceScript and their presence will generate no errors. However, in order to run Quicktest or Randomtest, the *console commands must be removed, or hidden by using Find-Replace All and the *comment function. Otherwise, the automated tests will pick up *console commands as errors. We are working to address this incompatibility issue and will endeavour to keep users informed of our progress. Meanwhile, to hide *console commands, we recommend using 'Find-Replace All' to replace '*console' with '*comment console'. When you are ready to use the Console commands again, use 'Find-Replace All' to change all instances of '*comment console' back to '*console'.","title":"Important Notes on *console_ Commands:"},{"location":"topics/console.html#still-cant-find-that-annoying-bug","text":"For those rare situations when even the standard Console log doesn't uncover the problem, you can also use the complementary Stepping function. This toggle can be turned off and on by clicking the 'Start Stepping' button on the main page of your play-test game. The Stepping function lets you 'step through' any part of your play test, one line at a time. This lets you closely analyse exactly what each line of code is doing during your play-test. Please see the Stepping topic for more details. Next Topic : Stepping Related Topics : Issues QuickTest & RandomTest Testing & Debugging","title":"Still can't find that annoying bug?"},{"location":"topics/further-reading.html","text":"The CSIDE Help Documentation provides an overview of CSIDE, with some of the basics on ChoiceScript as well. If you find you have more questions than we've answered here, we hope you'll be able to find some answers from the resources linked below. Official Resources ChoiceScript Introduction The official introduction, documentation, and tutorial for ChoiceScript. Choice of Games Blog Contains lots of useful articles on game structure and design. ChoiceScript Repository The Github Repository for the ChoiceScript code. You can download the latest standalone version of ChoiceScript on this page by clicking 'Clone or Download-Download Zip'. Writing for Choice of Games: Games An official document from Choice of Games detailing their recommended outline structure for game pitches to the Choice of Games house label. Choice of Games Style Guide An official document from Choice of Games with guidance on the expected writing style, for published games. Community Resources ChoiceScript Wikia A good collection of topics concerning ChoiceScript development, written entirely by other ChoiceScript users. The Wikia includes extended descriptions of each command, coding samples, testing procedures, and more. As it's volunteer-run, do be aware that some pages can become out of date. The vast majority of the information is, however, invaluable. Lglasser's Interactive ChoiceScript Tutorial A very comprehensive and easy-to-use web application that provides information and samples on all kinds of things ChoiceScript-related. RETowers' Basic ChoiceScript Guide A basic ChoiceScript guide actually written in ChoiceScript. This is a great starting point for newcomers to either the scripting language or the world of interactive fiction in general. CSIDE Resources CSIDE Website CSIDE's website contains articles, announcements, links and other useful CSIDE information. CSIDE on Github CSIDE's Github organisation and code repositories, for those with a technical interest. Farewell & Good Luck With that, we hope you feel you're off to a sound start in the world of ChoiceScript and of CSIDE! If you feel we've missed anything vital out of the documentation, or if you have a suggestion for the 'Further Reading' list, then please don't hesitate to contact us at cside@mazdrak.com. We'd love to hear from you! All the best, - The CSIDE Team","title":"Further reading"},{"location":"topics/further-reading.html#official-resources","text":"ChoiceScript Introduction The official introduction, documentation, and tutorial for ChoiceScript. Choice of Games Blog Contains lots of useful articles on game structure and design. ChoiceScript Repository The Github Repository for the ChoiceScript code. You can download the latest standalone version of ChoiceScript on this page by clicking 'Clone or Download-Download Zip'. Writing for Choice of Games: Games An official document from Choice of Games detailing their recommended outline structure for game pitches to the Choice of Games house label. Choice of Games Style Guide An official document from Choice of Games with guidance on the expected writing style, for published games.","title":"Official Resources"},{"location":"topics/further-reading.html#community-resources","text":"ChoiceScript Wikia A good collection of topics concerning ChoiceScript development, written entirely by other ChoiceScript users. The Wikia includes extended descriptions of each command, coding samples, testing procedures, and more. As it's volunteer-run, do be aware that some pages can become out of date. The vast majority of the information is, however, invaluable. Lglasser's Interactive ChoiceScript Tutorial A very comprehensive and easy-to-use web application that provides information and samples on all kinds of things ChoiceScript-related. RETowers' Basic ChoiceScript Guide A basic ChoiceScript guide actually written in ChoiceScript. This is a great starting point for newcomers to either the scripting language or the world of interactive fiction in general.","title":"Community Resources"},{"location":"topics/further-reading.html#cside-resources","text":"CSIDE Website CSIDE's website contains articles, announcements, links and other useful CSIDE information. CSIDE on Github CSIDE's Github organisation and code repositories, for those with a technical interest.","title":"CSIDE Resources"},{"location":"topics/further-reading.html#farewell-good-luck","text":"With that, we hope you feel you're off to a sound start in the world of ChoiceScript and of CSIDE! If you feel we've missed anything vital out of the documentation, or if you have a suggestion for the 'Further Reading' list, then please don't hesitate to contact us at cside@mazdrak.com. We'd love to hear from you! All the best, - The CSIDE Team","title":"Farewell &amp; Good Luck"},{"location":"topics/image-scenes.html","text":"By default, when running a play-test game within CSIDE, any use of the *image command in your scripting will attempt to find the external image from your project's directory (the folder containing your scene files). If desired, however, the 'Import - Image' option will convert a copy of your image into a data string stored directly inside its own scene file. This comes with a small overhead in terms of image size, but it allows support for images in compiled games. We recommend only using this feature with images that are 500 KB or below for optimal functionality. If the image conversion is successful, a pop-up window will display a *gosub_scene command. Copy and paste the command into the scene files wherever the image should appear. WARNING : Because image scenes contain the data for an entire image file, they can be rather large. As such, we recommend you avoid opening them within CSIDE for performance reasons (there should never be a need to). CSIDE also ignores any scene file prefixed with 'csideimg' when using 'Open All Scenes', etc.. If you wish to replace an image by changing or altering an image scene, simply delete the old image scene and re-import your image.","title":"Image scenes"},{"location":"topics/issues.html","text":"An 'Issue' is a logged error within your game, usually triggered by a scripting error. An issue is created when your game encounters a bug during a play-test in CSIDE. In addition to logging the error, Issues provide information on the location and type of bug. Issues are logged in the Issues Tab on a per-project basis. They are not persistent between CSIDE sessions. All issues (i.e., bugs) must be fixed before final publication of your game. How are Issues Organised? Each issue is associated with a specific project. Many are also associated with a single scene. If an error occurs in a scene file not currently listed under your project header, CSIDE will log the error and attempt to automatically load that scene. Note that issues are not persistent between CSIDE sessions; also, when closing a scene with outstanding issues, any related log entries will disappear from the Issues Tab. The Issue Tracker The Issue Tracker is a term we use to describe some of CSIDE's native Issues-related behaviour. When scripting errors occur during a play-test, CSIDE will log those errors in the Issues Tab. The Issue is listed on the Issues log, and can be accessed by clicking the triangle and exclamation mark icon above. The log entry includes the project name, the scene and line number when applicable, and the date and time when the error occurred. As part of the 'tracking' functionality, the Editor Window switches to the scene and line number containing the error and automatically highlights that line. In some cases, a scripting error can occur above the indicated line number where the game has crashed. For example, if you are missing a simple *goto command for one #option and receive an 'illegally fall out of a choice' statement, that error is only detected when the code hits a line containing something other than the expected *goto. In essence, if you cannot find an obvious error on the indicated line, check the section above that line (or below too, if the code is part of a loop section!) for errors such as a missing *goto, incorrect indentation, etc.. The specific error messages will help you determine what kind of error you are looking for, and where it is likely to occur. To return to an issue line later (but within the same session), use the 'Show this Issue' button (magnifying glass icon) on the appropriate Issue log. Tab to review any listed issues with known line numbers. Then select the issue, and the Code Editor will automatically display the section of code with the highlighted line. How Should I Handle Issues? CSIDE provides several tools to help you locate and correct issues. The Issues Tab gives details about the error to help you locate and resolve the problem. The Code Editor focuses on the line where the crash occurs. If you are still having trouble locating the issue, you can try the advanced CSIDE debugging features: Stepping and the Console. Once an issue is resolved, dismiss it under the Issues Tab by clicking the 'Dismiss' icon (the tick/check mark). This will also clear any error highlighting related to that issue. To clear all issues at once, click the 'Dismiss All' button on the top right of the Issues Tab. Next Topic : Console Related Topics : Testing & Debugging Stepping Quicktest & Randomtest","title":"Issues"},{"location":"topics/issues.html#how-are-issues-organised","text":"Each issue is associated with a specific project. Many are also associated with a single scene. If an error occurs in a scene file not currently listed under your project header, CSIDE will log the error and attempt to automatically load that scene. Note that issues are not persistent between CSIDE sessions; also, when closing a scene with outstanding issues, any related log entries will disappear from the Issues Tab.","title":"How are Issues Organised?"},{"location":"topics/issues.html#the-issue-tracker","text":"The Issue Tracker is a term we use to describe some of CSIDE's native Issues-related behaviour. When scripting errors occur during a play-test, CSIDE will log those errors in the Issues Tab. The Issue is listed on the Issues log, and can be accessed by clicking the triangle and exclamation mark icon above. The log entry includes the project name, the scene and line number when applicable, and the date and time when the error occurred. As part of the 'tracking' functionality, the Editor Window switches to the scene and line number containing the error and automatically highlights that line. In some cases, a scripting error can occur above the indicated line number where the game has crashed. For example, if you are missing a simple *goto command for one #option and receive an 'illegally fall out of a choice' statement, that error is only detected when the code hits a line containing something other than the expected *goto. In essence, if you cannot find an obvious error on the indicated line, check the section above that line (or below too, if the code is part of a loop section!) for errors such as a missing *goto, incorrect indentation, etc.. The specific error messages will help you determine what kind of error you are looking for, and where it is likely to occur. To return to an issue line later (but within the same session), use the 'Show this Issue' button (magnifying glass icon) on the appropriate Issue log. Tab to review any listed issues with known line numbers. Then select the issue, and the Code Editor will automatically display the section of code with the highlighted line.","title":"The Issue Tracker"},{"location":"topics/issues.html#how-should-i-handle-issues","text":"CSIDE provides several tools to help you locate and correct issues. The Issues Tab gives details about the error to help you locate and resolve the problem. The Code Editor focuses on the line where the crash occurs. If you are still having trouble locating the issue, you can try the advanced CSIDE debugging features: Stepping and the Console. Once an issue is resolved, dismiss it under the Issues Tab by clicking the 'Dismiss' icon (the tick/check mark). This will also clear any error highlighting related to that issue. To clear all issues at once, click the 'Dismiss All' button on the top right of the Issues Tab. Next Topic : Console Related Topics : Testing & Debugging Stepping Quicktest & Randomtest","title":"How Should I Handle Issues?"},{"location":"topics/keyboard-shortcuts.html","text":"Editor Shortcuts Action Windows Mac Undo last change CTRL + Z CMD + Z Redo last change CTRL + Y SHIFT + CMD + Z Cut CTRL + X CMD + X Copy CTRL + C CMD + C Paste CTRL + V CMD + V Indent selection TAB TAB Dedent selection SHIFT + TAB SHIFT + TAB Wrap or insert italic tags CTRL + I CMD + I Wrap or insert bold tags CTRL + B CMD + B Wrap or insert variable tags CTRL + D CMD + D Move selected text up a line ALT + UP ALT + UP Move selected text down a line ALT + DOWN ALT + DOWN Duplicate line (Up) SHIFT + CTRL + UP SHIFT + OPT + UP Duplicate line (Down) SHIFT + ALT + DOWN SHIFT + OPT + DOWN Delete line SHIFT + CTRL + K SHIFT + CMD + K Toggle block comment CTRL + / CMD + / Toggle full-window editor ESC / F11 ESC / F11 Toggle console SHIFT + CTRL + C SHIFT + CMD + C Increase font size SHIFT + CTRL + = SHIFT + CMD + = Decrease font size SHIFT + CTRL + - SHIFT + CMD + - Select previous scene CTRL + PGUP CMD + ALT + PGUP Select next scene CTRL + PGDN CMD + ALT + PGDN Global Shortcuts Action Windows Mac Add new scene to project CTRL + N CMD + N Close scene CTRL + W CMD + W Close project (all scenes) SHIFT + CTRL + W SHIFT + CMD + W Save scene CTRL + S CMD + S Save project (all scenes) SHIFT + CTRL + S SHIFT + CMD + S Open scenes CTRL + O CMD + O Open all scenes of project SHIFT + CTRL + O SHIFT + CMD + O Run Quicktest on project CTRL + T CMD + T Run Randomtest on project SHIFT + CTRL + T SHIFT + CMD + T Run active project SHIFT + CTRL + ENTER SHIFT + CMD + ENTER Toggle panel section SHIFT + CTRL + . SHIFT + CMD + . Toggle scene section SHIFT + CTRL + , SHIFT + CMD + , Toggle full-window editor ESC / F11 ESC / F11 Toggle console SHIFT + CTRL + C SHIFT + CMD + C Quit application SHIFT + CTRL + Q CMD + Q Find/Search/Replace Shortcuts Action Windows Mac Find CTRL + F CMD + F Find next CTRL + G CMD + G Find previous SHIFT + CTRL + G SHIFT + CMD + G Replace SHIFT + CTRL + F CMD + OPTION + F Replace all SHIFT + CTRL + R SHIFT + CMD + OPTION + F Jump to line ALT + G OPT + G Next Topic : Project Options","title":"Keyboard shortcuts"},{"location":"topics/keyboard-shortcuts.html#editor-shortcuts","text":"Action Windows Mac Undo last change CTRL + Z CMD + Z Redo last change CTRL + Y SHIFT + CMD + Z Cut CTRL + X CMD + X Copy CTRL + C CMD + C Paste CTRL + V CMD + V Indent selection TAB TAB Dedent selection SHIFT + TAB SHIFT + TAB Wrap or insert italic tags CTRL + I CMD + I Wrap or insert bold tags CTRL + B CMD + B Wrap or insert variable tags CTRL + D CMD + D Move selected text up a line ALT + UP ALT + UP Move selected text down a line ALT + DOWN ALT + DOWN Duplicate line (Up) SHIFT + CTRL + UP SHIFT + OPT + UP Duplicate line (Down) SHIFT + ALT + DOWN SHIFT + OPT + DOWN Delete line SHIFT + CTRL + K SHIFT + CMD + K Toggle block comment CTRL + / CMD + / Toggle full-window editor ESC / F11 ESC / F11 Toggle console SHIFT + CTRL + C SHIFT + CMD + C Increase font size SHIFT + CTRL + = SHIFT + CMD + = Decrease font size SHIFT + CTRL + - SHIFT + CMD + - Select previous scene CTRL + PGUP CMD + ALT + PGUP Select next scene CTRL + PGDN CMD + ALT + PGDN","title":"Editor Shortcuts"},{"location":"topics/keyboard-shortcuts.html#global-shortcuts","text":"Action Windows Mac Add new scene to project CTRL + N CMD + N Close scene CTRL + W CMD + W Close project (all scenes) SHIFT + CTRL + W SHIFT + CMD + W Save scene CTRL + S CMD + S Save project (all scenes) SHIFT + CTRL + S SHIFT + CMD + S Open scenes CTRL + O CMD + O Open all scenes of project SHIFT + CTRL + O SHIFT + CMD + O Run Quicktest on project CTRL + T CMD + T Run Randomtest on project SHIFT + CTRL + T SHIFT + CMD + T Run active project SHIFT + CTRL + ENTER SHIFT + CMD + ENTER Toggle panel section SHIFT + CTRL + . SHIFT + CMD + . Toggle scene section SHIFT + CTRL + , SHIFT + CMD + , Toggle full-window editor ESC / F11 ESC / F11 Toggle console SHIFT + CTRL + C SHIFT + CMD + C Quit application SHIFT + CTRL + Q CMD + Q","title":"Global Shortcuts"},{"location":"topics/keyboard-shortcuts.html#findsearchreplace-shortcuts","text":"Action Windows Mac Find CTRL + F CMD + F Find next CTRL + G CMD + G Find previous SHIFT + CTRL + G SHIFT + CMD + G Replace SHIFT + CTRL + F CMD + OPTION + F Replace all SHIFT + CTRL + R SHIFT + CMD + OPTION + F Jump to line ALT + G OPT + G Next Topic : Project Options","title":"Find/Search/Replace Shortcuts"},{"location":"topics/project-options.html","text":"CSIDE is designed so you can easily edit one or more ChoiceScript projects, developing and testing your games in a single, streamlined environment. You can create, reorder, and run your projects, control your individual scenes, and more! This page gives a brief overview of project options. General Functionality Brand new projects can be created by clicking the '+' icon alongside the 'Scenes & Projects' header. Existing game files can be imported into CSIDE (effectively creating a new project in CSIDE from existing content). Click the folder ('open scenes') button alongside the 'Scenes & Projects' header, then select the .txt files you want to import. Project Header Bar Rename : Rename a project at any time by double-clicking the project header bar. Reorder : Reorder a project by dragging and dropping the project header bar above or below other projects in the list. The new project order will persist between sessions. Hide Scenes : A project's entire scene list (excluding only the project's header bar) can be hidden or revealed by clicking the eye ('toggle visibility') button to the left of the project's name. This reduces clutter while leaving the project open for easy access. Save Project : Click the floppy disk ('save project') button on the header bar to save all currently unsaved scene files relating to that project. The floppy disk indicators on all unsaved scene files will then turn from red to grey, indicating all changes have been saved. Add New Scene : Click the '+' ('add scene') button on the project header bar to add a new 'Untitled' scene file to that project. To rename the scene, click it immediately after creation. Later on, rename the scene by double-clicking to select the scene and open the name editor. Run Game : Click the '\u25ba' ('run project') button on the project header bar to run your project within CSIDE. This will open or display the project in the Game Tab Panel on the right of the application. Project Context Menu Additional project options are available via a context menu, accessed by right-clicking a project header bar. Alternatively, select any scene file related to that project and use the app's main menu ('Project') button. The main menu in Windows and Web versions can be found in the top-left, above the Scenes & Projects tab. On Mac, the native app toolbar is used. Project menu options are as follows: Add New Scene : Adds a new 'Untitled' scene file to the selected project. Open All Scenes : Opens (that is, imports into this project) all valid .txt files located in the same folder. This is used to open additional scene files in the project, in the instance that one or more scene files have been closed, or if some scene files were not selected when the project was imported to CSIDE. Reload All Scenes : Ensures that file content in CSIDE matches that of the saved .txt file. This can be used if one or more files have been edited outside of CSIDE while the application is still running. Review - Word Count : Opens a window with the word count of the project as a whole, both including and excluding command lines. This will also display a word count of all selected text in all of that project's open scenes. Import - Image (As Scene) : Imports an image into your scene project, encoded within a file. See Image Scenes for more information. Export - All Scenes to Folder : Saves a copy of the entire project to a new or existing folder. This is useful for producing regular backups of a project during development, or preserving different versions. Export - Compiled Game : Creates a compiled HTML version of the current project, which can be then played in a browser or uploaded to a website. Please see the Publishing & Exporting topic for more details (This is only supported in the desktop versions of CSIDE). Test Project - Quicktest : Brings up the Quicktest Window and runs the project through the automated test routine. Quicktest helps find and analyse scripting errors; in addition, a finished project must pass Quicktest in order to be considered for publication by Choice of Games/Hosted Games LLC. Please see Testing & Debugging for more details. Test Project - Randomtest : Brings up the Randomtest Window and runs the project through the automated test routine. Randomtest helps find and analyse logic and continuity errors; in addition, a finished project must pass Randomtest in order to be considered for publication by Choice of Games/Hosted Games LLC. Please see Testing & Debugging for more details. Open Folder in Explorer/Finder : Displays the folder containing a project's .txt files in either Explorer or Finder. This is the only way to permanently delete a project folder from within CSIDE. To delete the project folder, select it in Explorer/Finder and press DEL (Windows) or CMD-DEL (Mac). Note : Deleting a project does not automatically remove the project listing from within CSIDE. After deleting the project from Explorer/Finder, select 'close project' from the project menu to remove its listing from the Scenes & Projects tab. Show/Hide Project : Hides or reveals the project's entire scene list, excluding only the project header. This reduces clutter while leaving the project open for easy access. (N.B. Clicking the eye ('toggle visibility') button to the left of the project name also hides/reveals the scene list.) Close Project : Removes the entire project from CSIDE. This does not delete the project folder or its contents. Any closed project may be reopened using the 'Open New Scene Files' option, as if importing that project for the very first time. Next Topic : Scene Options","title":"Project options"},{"location":"topics/project-options.html#general-functionality","text":"Brand new projects can be created by clicking the '+' icon alongside the 'Scenes & Projects' header. Existing game files can be imported into CSIDE (effectively creating a new project in CSIDE from existing content). Click the folder ('open scenes') button alongside the 'Scenes & Projects' header, then select the .txt files you want to import.","title":"General Functionality"},{"location":"topics/project-options.html#project-header-bar","text":"Rename : Rename a project at any time by double-clicking the project header bar. Reorder : Reorder a project by dragging and dropping the project header bar above or below other projects in the list. The new project order will persist between sessions. Hide Scenes : A project's entire scene list (excluding only the project's header bar) can be hidden or revealed by clicking the eye ('toggle visibility') button to the left of the project's name. This reduces clutter while leaving the project open for easy access. Save Project : Click the floppy disk ('save project') button on the header bar to save all currently unsaved scene files relating to that project. The floppy disk indicators on all unsaved scene files will then turn from red to grey, indicating all changes have been saved. Add New Scene : Click the '+' ('add scene') button on the project header bar to add a new 'Untitled' scene file to that project. To rename the scene, click it immediately after creation. Later on, rename the scene by double-clicking to select the scene and open the name editor. Run Game : Click the '\u25ba' ('run project') button on the project header bar to run your project within CSIDE. This will open or display the project in the Game Tab Panel on the right of the application.","title":"Project Header Bar"},{"location":"topics/project-options.html#project-context-menu","text":"Additional project options are available via a context menu, accessed by right-clicking a project header bar. Alternatively, select any scene file related to that project and use the app's main menu ('Project') button. The main menu in Windows and Web versions can be found in the top-left, above the Scenes & Projects tab. On Mac, the native app toolbar is used. Project menu options are as follows: Add New Scene : Adds a new 'Untitled' scene file to the selected project. Open All Scenes : Opens (that is, imports into this project) all valid .txt files located in the same folder. This is used to open additional scene files in the project, in the instance that one or more scene files have been closed, or if some scene files were not selected when the project was imported to CSIDE. Reload All Scenes : Ensures that file content in CSIDE matches that of the saved .txt file. This can be used if one or more files have been edited outside of CSIDE while the application is still running. Review - Word Count : Opens a window with the word count of the project as a whole, both including and excluding command lines. This will also display a word count of all selected text in all of that project's open scenes. Import - Image (As Scene) : Imports an image into your scene project, encoded within a file. See Image Scenes for more information. Export - All Scenes to Folder : Saves a copy of the entire project to a new or existing folder. This is useful for producing regular backups of a project during development, or preserving different versions. Export - Compiled Game : Creates a compiled HTML version of the current project, which can be then played in a browser or uploaded to a website. Please see the Publishing & Exporting topic for more details (This is only supported in the desktop versions of CSIDE). Test Project - Quicktest : Brings up the Quicktest Window and runs the project through the automated test routine. Quicktest helps find and analyse scripting errors; in addition, a finished project must pass Quicktest in order to be considered for publication by Choice of Games/Hosted Games LLC. Please see Testing & Debugging for more details. Test Project - Randomtest : Brings up the Randomtest Window and runs the project through the automated test routine. Randomtest helps find and analyse logic and continuity errors; in addition, a finished project must pass Randomtest in order to be considered for publication by Choice of Games/Hosted Games LLC. Please see Testing & Debugging for more details. Open Folder in Explorer/Finder : Displays the folder containing a project's .txt files in either Explorer or Finder. This is the only way to permanently delete a project folder from within CSIDE. To delete the project folder, select it in Explorer/Finder and press DEL (Windows) or CMD-DEL (Mac). Note : Deleting a project does not automatically remove the project listing from within CSIDE. After deleting the project from Explorer/Finder, select 'close project' from the project menu to remove its listing from the Scenes & Projects tab. Show/Hide Project : Hides or reveals the project's entire scene list, excluding only the project header. This reduces clutter while leaving the project open for easy access. (N.B. Clicking the eye ('toggle visibility') button to the left of the project name also hides/reveals the scene list.) Close Project : Removes the entire project from CSIDE. This does not delete the project folder or its contents. Any closed project may be reopened using the 'Open New Scene Files' option, as if importing that project for the very first time. Next Topic : Scene Options","title":"Project Context Menu"},{"location":"topics/projects.html","text":"In order to allow you to work on multiple CS games simultaneously, the IDE needs to be able to link and group each game's scenes together. This is done by assigning each game to a project. What is a Project? It's important to understand that projects only exist inside the IDE, there is no saved Project file nor is there any method or function via which you can open a Project - you can only ever open scene files. For the most part Project creation and assignment is handled automatically by the IDE. Project assignment is based on filepath meaning that any files opened from within the same folder will also be grouped under the same project. If a scene file is opened and there is no Project already open for that folder, the IDE will automatically create a new one and assign it to that Project instead. What do they do? Projects help both the IDE and its users keep scenes and their respective games organised. Without projects it would be hard - if not impossible - for both the program and the user to tell which scenes belonged to which game. By grouping scenes into projects, the IDE knows which scenes it's allowed to load during a run, which scenes to include in a word count, where to create new scene files for that game and much more.","title":"Projects"},{"location":"topics/projects.html#what-is-a-project","text":"It's important to understand that projects only exist inside the IDE, there is no saved Project file nor is there any method or function via which you can open a Project - you can only ever open scene files. For the most part Project creation and assignment is handled automatically by the IDE. Project assignment is based on filepath meaning that any files opened from within the same folder will also be grouped under the same project. If a scene file is opened and there is no Project already open for that folder, the IDE will automatically create a new one and assign it to that Project instead.","title":"What is a Project?"},{"location":"topics/projects.html#what-do-they-do","text":"Projects help both the IDE and its users keep scenes and their respective games organised. Without projects it would be hard - if not impossible - for both the program and the user to tell which scenes belonged to which game. By grouping scenes into projects, the IDE knows which scenes it's allowed to load during a run, which scenes to include in a word count, where to create new scene files for that game and much more.","title":"What do they do?"},{"location":"topics/publishing-and-exporting.html","text":"You've been working hard on your game, and you're ready to put up a public version for beta testing. Maybe you've even finished the beta testing stage, and you're at that exciting point when you submit the finished game for publication. Choice of Games/Hosted Games LLC handles the actual publishing and selling of ChoiceScript games, and you can learn more about that here . If you're looking for a way to get your project running outside of CSIDE for public beta testing purposes, read on! Exporting as Compiled Game A compiled game is a single file; clicking it runs your game in a web browser tab. To compile a game, right-click the project header bar and select 'Export: Compiled Game'. You'll be prompted to select a save location for the compiled file in either a new or existing folder. Compiled games can be hosted online on a private web server, like any other website, or via Dashingdon for beta testing purposes (see below for details). Note: If you wish to include images within your compiled game, please see the topic on Image Scenes . Exporting as Scene Files You can export your game as individual scene files, either as a backup, as a play-test version for your beta testers, or as a completed game for submission to Choice of Games LLC when looking to publish. To export your scenes, right-click the project header bar and select 'Export: All Scenes To Folder'. You will be prompted to select a save location for your scenes in an existing or newly-created folder. Scene files can be uploaded to Dashingdon's free ChoiceScript game hosting service to create a public beta test of your game online (see below for details). Public Beta Testing - Dashingdon.com When you're ready to share your game during the beta testing process, Dashingdon offers free hosting for your game, either as a compiled file or as a collection of .txt scenes. Dashingdon.com also supports images, a save plug-in, automatic Twitter announcements when your public beta is updated, and more. Please see the Dashingdon:Free ChoiceScript Game Hosting website or the service's forum thread for more information, or to make a free account. Next Topic : Further Reading","title":"Publishing and exporting"},{"location":"topics/publishing-and-exporting.html#exporting-as-compiled-game","text":"A compiled game is a single file; clicking it runs your game in a web browser tab. To compile a game, right-click the project header bar and select 'Export: Compiled Game'. You'll be prompted to select a save location for the compiled file in either a new or existing folder. Compiled games can be hosted online on a private web server, like any other website, or via Dashingdon for beta testing purposes (see below for details). Note: If you wish to include images within your compiled game, please see the topic on Image Scenes .","title":"Exporting as Compiled Game"},{"location":"topics/publishing-and-exporting.html#exporting-as-scene-files","text":"You can export your game as individual scene files, either as a backup, as a play-test version for your beta testers, or as a completed game for submission to Choice of Games LLC when looking to publish. To export your scenes, right-click the project header bar and select 'Export: All Scenes To Folder'. You will be prompted to select a save location for your scenes in an existing or newly-created folder. Scene files can be uploaded to Dashingdon's free ChoiceScript game hosting service to create a public beta test of your game online (see below for details).","title":"Exporting as Scene Files"},{"location":"topics/publishing-and-exporting.html#public-beta-testing-dashingdoncom","text":"When you're ready to share your game during the beta testing process, Dashingdon offers free hosting for your game, either as a compiled file or as a collection of .txt scenes. Dashingdon.com also supports images, a save plug-in, automatic Twitter announcements when your public beta is updated, and more. Please see the Dashingdon:Free ChoiceScript Game Hosting website or the service's forum thread for more information, or to make a free account. Next Topic : Further Reading","title":"Public Beta Testing - Dashingdon.com"},{"location":"topics/quicktest-and-randomtest.html","text":"CSIDE includes both Quicktest and Randomtest, the two automated testing routines provided by Choice of Games LLC. Both tests are seamlessly incorporated for quick and easy bug testing. If you are familiar with ChoiceScript, you've likely already heard of these tests, or even used them in .bat or form. In CSIDE, both Quicktest and Randomtest are fully integrated and can be run through either the project menu or a hotkey combination. Ideally, both these tests should be run regularly. The autotests can save a lot of time in play-testing by detecting bugs in advance, allowing you to fix them before they cause the game to crash during a play-through. Quicktest is especially useful for finding basic scripting errors. Games must pass both Quicktest and Randomtest before they are eligible to be considered for publication through Choice of Games/Hosted Games LLC. Any future updates of the autotests released by Choice of Games LLC will be included in a CSIDE update shortly after their release. Running Automated Tests in CSIDE You can run Quicktest and Randomtest within CSIDE by right-clicking the project header bar and selecting one of the tests under the 'Test Project' menu, or by selecting 'Project-Test Project-Quicktest/Randomtest' from CSIDE's menu. You can also use hotkeys: CTRL-T/CMD-T runs Quicktest and CTRL-SHIFT-T/CMD-SHIFT-T launches Randomtest. The automated tests will launch in a new window. The autotests will access all valid scene files located in your project folder, whether or not that scene file is currently open in CSIDE. Quicktest runs immediately; Randomtest offers the standard list of configuration options before proceeding. Note that both tests are only applied to the most recently saved version of your scene files. When the Code Editor is in focus (i.e. with a blinking text cursor), you can use CTRL-S/CMD-S to quickly save your file before running the automated tests. Note : The automated tests are not available in the Web version of CSIDE. For more information on the mechanics of Quicktest and Randomtest, please see CoG's official documentation on Testing ChoiceScript Games Automatically or the community Wiki page on the topic. Next Topic : Publishing and Exporting Related Topics : Issues Console Stepping Testing & Debugging","title":"Quicktest & Randomtest"},{"location":"topics/quicktest-and-randomtest.html#running-automated-tests-in-cside","text":"You can run Quicktest and Randomtest within CSIDE by right-clicking the project header bar and selecting one of the tests under the 'Test Project' menu, or by selecting 'Project-Test Project-Quicktest/Randomtest' from CSIDE's menu. You can also use hotkeys: CTRL-T/CMD-T runs Quicktest and CTRL-SHIFT-T/CMD-SHIFT-T launches Randomtest. The automated tests will launch in a new window. The autotests will access all valid scene files located in your project folder, whether or not that scene file is currently open in CSIDE. Quicktest runs immediately; Randomtest offers the standard list of configuration options before proceeding. Note that both tests are only applied to the most recently saved version of your scene files. When the Code Editor is in focus (i.e. with a blinking text cursor), you can use CTRL-S/CMD-S to quickly save your file before running the automated tests. Note : The automated tests are not available in the Web version of CSIDE. For more information on the mechanics of Quicktest and Randomtest, please see CoG's official documentation on Testing ChoiceScript Games Automatically or the community Wiki page on the topic. Next Topic : Publishing and Exporting Related Topics : Issues Console Stepping Testing & Debugging","title":"Running Automated Tests in CSIDE"},{"location":"topics/scene-options.html","text":"CSIDE is designed to let you easily edit and organise your project's scenes. You can create, reorder, move, copy, or even colour-code your scene files, and more! Scene Interaction To select a particular scene, left-click its name in the Scenes & Projects tab. This will load its contents into the code editor. A scene can be renamed at any time by double-clicking the scene name (or single-clicking, if it is already selected). You cannot rename the project's two compulsory ChoiceScript files, 'startup' and 'choicescript_stats'. Scene file order can be amended by dragging and dropping a scene to a new location within the scene list. The new scene order will persist between sessions. Scene files can also be copied to or moved between projects by dragging and dropping a scene from one project listing to another. You will be prompted to clarify (or cancel) the action being taken. Scenes can be colour-coded for easy reference or organisation. Click the colour bubble to the left of a particular scene name to change that scene's colour code. These changes will also persist across sessions. Scene State A scene's current state can be determined by its status icon. A grey floppy disk indicates a saved scene file. Other states include: A Red Floppy Disk : This indicates that the scene has unsaved changes. Clicking the icon, or pressing CTRL-S/CMD-S while it is selected, will save the file, and turn the icon grey. A Red Error Icon : This usually indicates that the scene has failed to load. Hovering over the icon produces an error message via its tooltip. Clicking the icon closes the scene, and clicking its name attempts to reload it. Scene Context Menu The scene context menu contains additional options. To access the menu, right-click a particular scene, or select that scene and click the ('Scene') File icon at the extreme top left of the user interface (use the native app menu for Mac). Edit - Convert All Spaces to Tabs : Changes the indentation character as indicated. This does not affect ordinary (e.g., narrative) spacing. Edit - Convert All Tabs to Spaces : Changes the indentation character content as indicated. A default CSIDE Tab is converted to the number of spaces specified in Settings Tab . Review - Word Count : Brings up a window displaying the approximate word count of the selected scene, both including and excluding command lines. If the scene is currently selected and displayed in the Code Editor, this option also details the word count of any selected text within that scene. Reload : Ensures that file content in CSIDE matches that of the saved .txt file. This can be used if one or more files have been edited outside of CSIDE while the application is still running. Close : Removes the selected scene listing from CSIDE, but does not actually delete the file. A closed scene may be reopened using the Project menu's 'Open all scenes' option. Delete File : Permanently deletes the selected text file from your hard drive, as well as from CSIDE itself. You will be prompted to confirm. Export - Copy file to folder : Saves a copy of the scene file to a different, specified folder (either new or existing). Useful for saving a separate backup copy at periodic intervals, and also for tweaking and updating ongoing public play-test games (see Publishing and Exporting . Export - Print : Produces a paper copy of the file content for reviewing at your leisure. Next Topic : Code Editor","title":"Scene options"},{"location":"topics/scene-options.html#scene-interaction","text":"To select a particular scene, left-click its name in the Scenes & Projects tab. This will load its contents into the code editor. A scene can be renamed at any time by double-clicking the scene name (or single-clicking, if it is already selected). You cannot rename the project's two compulsory ChoiceScript files, 'startup' and 'choicescript_stats'. Scene file order can be amended by dragging and dropping a scene to a new location within the scene list. The new scene order will persist between sessions. Scene files can also be copied to or moved between projects by dragging and dropping a scene from one project listing to another. You will be prompted to clarify (or cancel) the action being taken. Scenes can be colour-coded for easy reference or organisation. Click the colour bubble to the left of a particular scene name to change that scene's colour code. These changes will also persist across sessions.","title":"Scene Interaction"},{"location":"topics/scene-options.html#scene-state","text":"A scene's current state can be determined by its status icon. A grey floppy disk indicates a saved scene file. Other states include: A Red Floppy Disk : This indicates that the scene has unsaved changes. Clicking the icon, or pressing CTRL-S/CMD-S while it is selected, will save the file, and turn the icon grey. A Red Error Icon : This usually indicates that the scene has failed to load. Hovering over the icon produces an error message via its tooltip. Clicking the icon closes the scene, and clicking its name attempts to reload it.","title":"Scene State"},{"location":"topics/scene-options.html#scene-context-menu","text":"The scene context menu contains additional options. To access the menu, right-click a particular scene, or select that scene and click the ('Scene') File icon at the extreme top left of the user interface (use the native app menu for Mac). Edit - Convert All Spaces to Tabs : Changes the indentation character as indicated. This does not affect ordinary (e.g., narrative) spacing. Edit - Convert All Tabs to Spaces : Changes the indentation character content as indicated. A default CSIDE Tab is converted to the number of spaces specified in Settings Tab . Review - Word Count : Brings up a window displaying the approximate word count of the selected scene, both including and excluding command lines. If the scene is currently selected and displayed in the Code Editor, this option also details the word count of any selected text within that scene. Reload : Ensures that file content in CSIDE matches that of the saved .txt file. This can be used if one or more files have been edited outside of CSIDE while the application is still running. Close : Removes the selected scene listing from CSIDE, but does not actually delete the file. A closed scene may be reopened using the Project menu's 'Open all scenes' option. Delete File : Permanently deletes the selected text file from your hard drive, as well as from CSIDE itself. You will be prompted to confirm. Export - Copy file to folder : Saves a copy of the scene file to a different, specified folder (either new or existing). Useful for saving a separate backup copy at periodic intervals, and also for tweaking and updating ongoing public play-test games (see Publishing and Exporting . Export - Print : Produces a paper copy of the file content for reviewing at your leisure. Next Topic : Code Editor","title":"Scene Context Menu"},{"location":"topics/scenes.html","text":"This topic assumes basic Choicescript knowledge of Scenes and only discusses them in an IDE context. For more general information on the topic please see the wiki page . What is a Scene? A choicescript game is usually split up into scenes, otherwise known as 'vignettes' or chapters. Each scene's code and text is kept in its own separate text (.txt) file.","title":"Scenes"},{"location":"topics/scenes.html#what-is-a-scene","text":"A choicescript game is usually split up into scenes, otherwise known as 'vignettes' or chapters. Each scene's code and text is kept in its own separate text (.txt) file.","title":"What is a Scene?"},{"location":"topics/stepping.html","text":"CSIDE's Stepping function allows you to procedurally step through your game's code one line at a time, helping you closely monitor and analyse each line of your code. Together with the Console log, which displays variable changes as they occur, Stepping provides an effective, efficient way to find and correct any logic errors in your code. To activate the Stepping function, select the 'Start Stepping' button at the top of the Game Tab Panel, beside the standard 'Show Stats' and 'Restart' buttons. When Stepping is activated, the button will change to 'Stop Stepping'. Stepping also reveals an adjacent 'Step' button. The 'Step' button is used to proceed through the code one line at a time. 'Start Stepping' and 'Stop Stepping' can be toggled on and off at any time during a play-test. When Stepping is active, the Code Editor window switches scenes as needed to display the line of code being executed on each click of the 'Step' button. The active line of code is indicated by an arrow next to the line number on the left side of the display. The Code Editor automatically attempts to load any closed scene files needed to display the active line of code. Stepping slows down the processing of your game code to let you to check for errors. Note that the play-test game is still running in the Game Tab Panel. To proceed at a *choice or an *input_text box, you'll need to interact with the game in the normal fashion. Choose an #option in the Game Tab panel, click 'Next', input text, or etc., to proceed. Next Topic : Quicktest & Randomtest Related Topics : Issues Console Testing & Debugging","title":"Stepping"},{"location":"topics/tab-panels.html","text":"The CSIDE Tabs, on the right of the user interface, work just like tabs in your browser. You can select a tab by clicking its icon. When switching between tabs, each individual tab page will stay in the same position as when last viewed. You can hide or display the Tabs Panel by clicking the double arrow button at the top right corner of the Code Editor. Help Tab CSIDE displays the Help Tab panel by default when first loaded. Click the question mark icon above to refer to the Help documentation at any time. Using the Help Tab will not alter or interfere with the other Panels or Tabs. Settings Tab The Settings Tab, accessed through the cog icon above, provides options for CSIDE's appearance and functionality. Changes to Settings take immediate effect, are automatically saved, and persist between sessions. User Dictionary Tab The User Dictionary, accessed through the book icon above, allows for manual addition or removal of user-defined words, such as unusual spellings or character and place names (e.g. 'Delgorath'). User-defined words will not be marked as misspelled in the Code Editor. Any genuine misspellings (e.g. 'Delgaroth') will still be underlined, helping ensure consistency throughout the narrative. Right-clicking a misspelled word in the Code Editor displays a menu of possible alternate spellings. It also offers the options to ignore the word during the current session, or add it permanently to the user dictionary. As with an ordinary dictionary, the User Dictionary is not case-sensitive. Both 'Delgorath' and 'delgorath' would be deemed correct in the Code Editor as long as that word is in the User Dictionary. By the same token, note that 'words' including numbers, underscores, or other special characters, e.g. 'var1', are not considered actual words by the spell-checker and will be ignored. You may find it useful to add abbreviated or abstract variable names to your User Dictionary, at least for the duration of your current project. This avoids repeated highlighting of your legitimate variables; it also helps highlight any inadvertent misspellings in your code, reducing the likelihood of 'unknown variable name' errors and game crashes during testing. Issues Tab The Issues Tab is represented by a triangle and exclamation mark icon. 'Issues' are scripting errors detected while running a test game in the Game Tab panel. For more information, see Issues . Example Projects Tab It is our intention over time to provide a number of useful Example Projects. These Projects are designed to assist CSIDE users in learning and growing with ChoiceScript. This tab is automatically updated when new Example Projects, or new editions of existing examples, become available. To use an Example Project, first import it using the 'Import' button. This creates a new folder for the Example Project on your hard drive. This creates a new folder for the Example Project on your hard drive and automatically opens the project in CSIDE. Once installed, click 'Run This Project' on the new project's header bar to launch the Example Project. You can freely change and experiment with the scripting of an Example Project without fear of breaking something in the process. If the Example Project becomes unusable, simply close or delete the project and import a fresh copy. Our first Example Project, 'The Interactive CSIDE Tutorial', is a detailed guide to learning basic ChoiceScript. Although primarily intended for newcomers to ChoiceScript, it also provides all new users with an introduction to CSIDE. Game Tab Clicking the Play icon (right arrow/'Run project') on a project header bar runs that game in CSIDE, automatically switching to the Game Tab in the Tabs Panel. The Game Tab can also be selected by clicking on the cube icon above. Alternately, CTRL-SHIFT-ENTER (CMD-SHIFT-ENTER), when the Code Editor window has focus (i.e., a blinking cursor), will quick-run the current project in the Code Editor. Remember to use CTRL-S/CMD-S to first quick-save the current scene; otherwise, the play-test game will not reflect the latest changes. The play-test game will run exactly as it does in a web browser, along with some useful additions. Extra buttons at the top, located alongside the usual 'Show Stats' and 'Restart' buttons, grant access to these features: Popout : Runs an additional instance of the game in a separate, resizeable window, so you can simultaneously test two different options/paths. This can be especially useful when comparing conditional narrative responses, or checking for related inconsistencies and formatting issues. A fresh popout instance alway starts on the same page and with the same data as the main game running in your Game Tab panel. This way, it's possible to check the narrative response for every single #option of a particular *choice without having to play through from the beginning. To try it, click the popout button, select and play-test the first #option in the popout, and then close the window. Click popout again, which will once again reflect the position of the main game in the Game Tab, and select the second #option for testing. Repeat as needed to check each #option of a particular *choice. If the main game or the popout encounter an error in the game code while running, the game may crash, just like it would in a web browser. If the game crashes in only the Game Tab or the popout, the other instance will continue unless it also encounters a game-breaking scripting bug. A game crash will almost always generate a log entry in the Issues Tab to help locate, identify, and resolve the error(s). If at first you don't succeed, fix it and try again! And of course, a test game crash does not affect the stability or performance of CSIDE in any way. Start Stepping : This advanced Game Tab function is covered under Stepping . CSIDE Console : This is an advanced, very versatile monitoring and debugging tool directly related to test-running a Project in the Game Tab panel. It is covered in its own Help topic: Console . Next Topic : Testing & Debugging","title":"Tab panels"},{"location":"topics/tab-panels.html#help-tab","text":"CSIDE displays the Help Tab panel by default when first loaded. Click the question mark icon above to refer to the Help documentation at any time. Using the Help Tab will not alter or interfere with the other Panels or Tabs.","title":"Help Tab"},{"location":"topics/tab-panels.html#settings-tab","text":"The Settings Tab, accessed through the cog icon above, provides options for CSIDE's appearance and functionality. Changes to Settings take immediate effect, are automatically saved, and persist between sessions.","title":"Settings Tab"},{"location":"topics/tab-panels.html#user-dictionary-tab","text":"The User Dictionary, accessed through the book icon above, allows for manual addition or removal of user-defined words, such as unusual spellings or character and place names (e.g. 'Delgorath'). User-defined words will not be marked as misspelled in the Code Editor. Any genuine misspellings (e.g. 'Delgaroth') will still be underlined, helping ensure consistency throughout the narrative. Right-clicking a misspelled word in the Code Editor displays a menu of possible alternate spellings. It also offers the options to ignore the word during the current session, or add it permanently to the user dictionary. As with an ordinary dictionary, the User Dictionary is not case-sensitive. Both 'Delgorath' and 'delgorath' would be deemed correct in the Code Editor as long as that word is in the User Dictionary. By the same token, note that 'words' including numbers, underscores, or other special characters, e.g. 'var1', are not considered actual words by the spell-checker and will be ignored. You may find it useful to add abbreviated or abstract variable names to your User Dictionary, at least for the duration of your current project. This avoids repeated highlighting of your legitimate variables; it also helps highlight any inadvertent misspellings in your code, reducing the likelihood of 'unknown variable name' errors and game crashes during testing.","title":"User Dictionary Tab"},{"location":"topics/tab-panels.html#issues-tab","text":"The Issues Tab is represented by a triangle and exclamation mark icon. 'Issues' are scripting errors detected while running a test game in the Game Tab panel. For more information, see Issues .","title":"Issues Tab"},{"location":"topics/tab-panels.html#example-projects-tab","text":"It is our intention over time to provide a number of useful Example Projects. These Projects are designed to assist CSIDE users in learning and growing with ChoiceScript. This tab is automatically updated when new Example Projects, or new editions of existing examples, become available. To use an Example Project, first import it using the 'Import' button. This creates a new folder for the Example Project on your hard drive. This creates a new folder for the Example Project on your hard drive and automatically opens the project in CSIDE. Once installed, click 'Run This Project' on the new project's header bar to launch the Example Project. You can freely change and experiment with the scripting of an Example Project without fear of breaking something in the process. If the Example Project becomes unusable, simply close or delete the project and import a fresh copy. Our first Example Project, 'The Interactive CSIDE Tutorial', is a detailed guide to learning basic ChoiceScript. Although primarily intended for newcomers to ChoiceScript, it also provides all new users with an introduction to CSIDE.","title":"Example Projects Tab"},{"location":"topics/tab-panels.html#game-tab","text":"Clicking the Play icon (right arrow/'Run project') on a project header bar runs that game in CSIDE, automatically switching to the Game Tab in the Tabs Panel. The Game Tab can also be selected by clicking on the cube icon above. Alternately, CTRL-SHIFT-ENTER (CMD-SHIFT-ENTER), when the Code Editor window has focus (i.e., a blinking cursor), will quick-run the current project in the Code Editor. Remember to use CTRL-S/CMD-S to first quick-save the current scene; otherwise, the play-test game will not reflect the latest changes. The play-test game will run exactly as it does in a web browser, along with some useful additions. Extra buttons at the top, located alongside the usual 'Show Stats' and 'Restart' buttons, grant access to these features: Popout : Runs an additional instance of the game in a separate, resizeable window, so you can simultaneously test two different options/paths. This can be especially useful when comparing conditional narrative responses, or checking for related inconsistencies and formatting issues. A fresh popout instance alway starts on the same page and with the same data as the main game running in your Game Tab panel. This way, it's possible to check the narrative response for every single #option of a particular *choice without having to play through from the beginning. To try it, click the popout button, select and play-test the first #option in the popout, and then close the window. Click popout again, which will once again reflect the position of the main game in the Game Tab, and select the second #option for testing. Repeat as needed to check each #option of a particular *choice. If the main game or the popout encounter an error in the game code while running, the game may crash, just like it would in a web browser. If the game crashes in only the Game Tab or the popout, the other instance will continue unless it also encounters a game-breaking scripting bug. A game crash will almost always generate a log entry in the Issues Tab to help locate, identify, and resolve the error(s). If at first you don't succeed, fix it and try again! And of course, a test game crash does not affect the stability or performance of CSIDE in any way. Start Stepping : This advanced Game Tab function is covered under Stepping . CSIDE Console : This is an advanced, very versatile monitoring and debugging tool directly related to test-running a Project in the Game Tab panel. It is covered in its own Help topic: Console . Next Topic : Testing & Debugging","title":"Game Tab"},{"location":"topics/testing-and-debugging.html","text":"Regular testing and debugging are vital to ensure your game works properly, so your readers can enjoy your interactive fiction! If you're already familiar with the general concepts of testing and debugging, feel free to skip to the CSIDE-specific topic links at the bottom of this page. If this is new for you but you're eager to learn more, read on! We all have those days when we've written countless lines of clever code and woven it around our wonderful story, only to find that our game doesn't quite work as expected. Things just don't add up. In short, our game is broken. We all make those mistakes, but how do we go about fixing them? If it's a coding mistake (a scripting bug or logic error), then CSIDE has your back! If it's a literary mistake, that's a little out of our domain. But don't worry, there's still plenty of help out there; you can always try the Choice of Games Forum for starters. Testing (Finding Bugs) So you have a working game. Congratulations! It might be finished, in its very early stages, or anywhere between. Time to give it a shake and see if any bugs fall out! This stage of writing a ChoiceScript game is called testing. There are three basic types of testing for ChoiceScript games: Quicktest Randomtest Play Testing Quicktest and Randomtest are both automated testing and debugging tools provided by Choice of Games for debugging your code. It's a wise idea to run them regularly so you can promptly detect and fix any game-breaking errors. You can run Quicktest and Randomtest within CSIDE by right-clicking on the project header bar and selecting Test Project. If there is a detectable bug, the test identifies the type of bug, and the scene file and line number where the problem occurs. During a play test, readers play through your work and give feedback on continuity errors, typos, any bugs that might still be left after Quicktest and Randomtest, and any other problems or issues they encounter. You can also play-test the game yourself within CSIDE; actually, doing this before you let anyone else see it is probably a good idea! CSIDE makes the play-test process easy and extra efficient, in part through Issues, its built-in tracking error. If the game crashes while playtesting, CSIDE logs the error as an 'Issue' and will attempt to give you the type and line number of the error. Debugging (Fixing Bugs) So there's a bug in your game. What happens next? Do you give up? No, of course not; it's time to fix it! Squashing those pesky little bugs is a process called 'debugging'. Once you know there's a bug, the next step is figuring out the cause. Debugging tools help you locate and isolate the source of any bugs. Methods of debugging include: Looking through your code Addressing any Issues logged by CSIDE Using the automated tests Using the CSIDE Console while running a test game Recruiting testers to help isolate exactly when and why a bug occurs It's important to note that testing and debugging are not necessarily separate or exclusive parts of designing your ChoiceScript game. In fact, most methods for debugging help you both find and fix bugs. Of course, debugging sometimes reveals (or even introduces) more bugs. CSIDE Issues, Quicktest, and Randomtest can help you periodically fix bugs; you can address error reports one at a time until you have a working game. Play-testers, on the other hand, can point out continuity or scripting errors that are not game-breaking, or they can play through specific sections to isolate a known bug. Some of the debugging tools, such as the CSIDE Console, are exceptionally helpful if the error is logical in nature; logic errors can be hard to find when hunting directly through the code. A logic error might include a bug that makes your game behave strangely in particular situations but doesn't necessarily cause it to crash, or a bug where the initial error is located in a different part of the scripting to the actual crash. It's extremely important to test your game as you go, after each section or even after each day's work. Making sure your game is bug-free on a regular basis (or as close to bug-free as humanly possible!) makes testing and debugging simpler and quicker in the long run. (Plus, there's that nice warm fuzzy feeling when you can play all the way through your game without encountering any game-breaking problems.) Further Reading: Tools of the Trade Now that you have a general idea of what testing and debugging is all about, here are some links to more in-depth topics. They cover each of the relevant features and tools provided by ChoiceScript and CSIDE. Issues Console Stepping Quicktest and Randomtest Next Topic : Publishing and Exporting","title":"Testing and debugging"},{"location":"topics/testing-and-debugging.html#testing-finding-bugs","text":"So you have a working game. Congratulations! It might be finished, in its very early stages, or anywhere between. Time to give it a shake and see if any bugs fall out! This stage of writing a ChoiceScript game is called testing. There are three basic types of testing for ChoiceScript games: Quicktest Randomtest Play Testing Quicktest and Randomtest are both automated testing and debugging tools provided by Choice of Games for debugging your code. It's a wise idea to run them regularly so you can promptly detect and fix any game-breaking errors. You can run Quicktest and Randomtest within CSIDE by right-clicking on the project header bar and selecting Test Project. If there is a detectable bug, the test identifies the type of bug, and the scene file and line number where the problem occurs. During a play test, readers play through your work and give feedback on continuity errors, typos, any bugs that might still be left after Quicktest and Randomtest, and any other problems or issues they encounter. You can also play-test the game yourself within CSIDE; actually, doing this before you let anyone else see it is probably a good idea! CSIDE makes the play-test process easy and extra efficient, in part through Issues, its built-in tracking error. If the game crashes while playtesting, CSIDE logs the error as an 'Issue' and will attempt to give you the type and line number of the error.","title":"Testing (Finding Bugs)"},{"location":"topics/testing-and-debugging.html#debugging-fixing-bugs","text":"So there's a bug in your game. What happens next? Do you give up? No, of course not; it's time to fix it! Squashing those pesky little bugs is a process called 'debugging'. Once you know there's a bug, the next step is figuring out the cause. Debugging tools help you locate and isolate the source of any bugs. Methods of debugging include: Looking through your code Addressing any Issues logged by CSIDE Using the automated tests Using the CSIDE Console while running a test game Recruiting testers to help isolate exactly when and why a bug occurs It's important to note that testing and debugging are not necessarily separate or exclusive parts of designing your ChoiceScript game. In fact, most methods for debugging help you both find and fix bugs. Of course, debugging sometimes reveals (or even introduces) more bugs. CSIDE Issues, Quicktest, and Randomtest can help you periodically fix bugs; you can address error reports one at a time until you have a working game. Play-testers, on the other hand, can point out continuity or scripting errors that are not game-breaking, or they can play through specific sections to isolate a known bug. Some of the debugging tools, such as the CSIDE Console, are exceptionally helpful if the error is logical in nature; logic errors can be hard to find when hunting directly through the code. A logic error might include a bug that makes your game behave strangely in particular situations but doesn't necessarily cause it to crash, or a bug where the initial error is located in a different part of the scripting to the actual crash. It's extremely important to test your game as you go, after each section or even after each day's work. Making sure your game is bug-free on a regular basis (or as close to bug-free as humanly possible!) makes testing and debugging simpler and quicker in the long run. (Plus, there's that nice warm fuzzy feeling when you can play all the way through your game without encountering any game-breaking problems.)","title":"Debugging (Fixing Bugs)"},{"location":"topics/testing-and-debugging.html#further-reading-tools-of-the-trade","text":"Now that you have a general idea of what testing and debugging is all about, here are some links to more in-depth topics. They cover each of the relevant features and tools provided by ChoiceScript and CSIDE. Issues Console Stepping Quicktest and Randomtest Next Topic : Publishing and Exporting","title":"Further Reading: Tools of the Trade"}]}; var __search = { index: Promise.resolve(local_index) }