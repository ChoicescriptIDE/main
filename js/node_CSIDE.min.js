if (usingNode) {
    if (gui.App.on("open", function(path) {
        ".txt" == path.substring(path.lastIndexOf("."), path.length) && cside.openScene(path.replace("file://", ""));
    }), gui.App.argv) for (var path = "", i = 0; i < gui.App.argv.length; i++) ".txt" == (path = gui.App.argv[i]).substring(path.lastIndexOf("."), path.length) && cside.openScene(path.replace("file://", ""));
    var macosKeyDown = !1, wKeyDown = !1;
    window.addEventListener("keydown", function(event) {
        return "Meta" === event.key && (macosKeyDown = !0), !0;
    }), window.addEventListener("keyup", function(event) {
        return "Meta" === event.key && (macosKeyDown = !1), !0;
    }), win.on("close", function(event) {
        macosKeyDown || wKeyDown ? cside.getActiveFile() && cside.getActiveFile().close() : [ "IFRAME", "WEBVIEW" ].includes(document.activeElement.tagName) || (console.log(event), 
        (cside.isUpdating() ? updateClosure : dirtyClosure)());
    }), win.on("new-win-policy", function(frame, url, policy) {
        url.indexOf("https://choicescriptdev.wikia.com") || policy.ignore(), gui.Shell.openExternal(url), 
        policy.ignore();
    });
}

function dirtyClosure() {
    function quit() {
        try {
            win.hide(), gui.App.closeAllWindows(), win.close(!0);
        } catch (e) {
            gui.App.closeAllWindows(), win.close(!0);
        }
    }
    cside.session.isDirty() && 0 !== cside.getProjects().length || quit(), bootbox.dialog({
        message: "One or more scenes has unsaved changes, are you sure you want to quit?",
        title: "Unsaved Changes",
        buttons: {
            yes: {
                label: "Don't save",
                className: "btn-primary",
                callback: function() {
                    quit();
                }
            },
            saveandquit: {
                label: "Save & Quit",
                callback: function() {
                    var n = cside.notification("", "<i aria-hidden=true class='fa fa-refresh fa-spin'></i> Saving files. Please do not close CSIDE.", {
                        closeWith: !1,
                        timeout: !1
                    });
                    cside.session.save(function(err) {
                        n.close(), err ? cside.notification("Error", "Failed to save one or more files. App will not exit.", {
                            type: "error"
                        }) : quit();
                    });
                }
            },
            no: {
                label: "Cancel",
                callback: function() {}
            }
        }
    });
}

function updateClosure() {
    cside.isUpdating() && bootbox.dialog({
        message: "The IDE is currently updating, are you sure wish to close the program? This is likely to cause the app package to corrupt.",
        title: "Update in Progress",
        buttons: {
            yes: {
                label: "Quit",
                className: "btn-primary",
                callback: function() {
                    dirtyClosure();
                }
            },
            no: {
                label: "Cancel",
                callback: function() {}
            }
        }
    });
}

Mousetrap.bind([ "command+s", "ctrl+s" ], function(e) {
    return cside.getSelectedScene() && cside.getSelectedScene().save(), !1;
}), Mousetrap.bind([ "command+t", "ctrl+t" ], function(e) {
    return cside.getSelectedProject() && cside.getSelectedProject().test("quick"), !1;
}), Mousetrap.bind([ "command+shift+t", "ctrl+shift+t" ], function(e) {
    return cside.getSelectedProject() && cside.getSelectedProject().test("random"), 
    !1;
}), Mousetrap.bind([ "command+shift+s", "ctrl+shift+s" ], function(e) {
    return cside.getSelectedProject() && cside.getSelectedProject().save(), !1;
}), Mousetrap.bind([ "command+w", "ctrl+w" ], function(e) {
    return cside.getSelectedScene() && cside.getSelectedScene().close(), !1;
}), Mousetrap.bind([ "command+shift+w", "ctrl+shift+w" ], function(e) {
    return cside.getSelectedProject() && cside.getSelectedProject().close(), !1;
}), Mousetrap.bind([ "command+n", "ctrl+n" ], function(e) {
    return cside.getSelectedProject() && cside.getSelectedProject().addNewScene(), !1;
}), Mousetrap.bind([ "command+shift+n", "ctrl+shift+n" ], function(e) {
    return cside.createProject(), !1;
}), usingNode && win.showDevTools && Mousetrap.bind([ "command+option+i", "F12" ], function(e) {
    return win.showDevTools(), !1;
}), Mousetrap.bind([ "command+shift+p", "ctrl+shift+p" ], function() {
    return cside.tabPanel(), !1;
}), Mousetrap.bind([ "command+shift+f" ], function() {
    return cside.session.win.toggleMaximize(), !1;
}), Mousetrap.bind([ "command+ctrl+f" ], function() {
    return cside.maxFramelessWindow(), !1;
}), Mousetrap.bind([ "command+shift+o", "ctrl+shift+o" ], function() {
    return cside.getSelectedProject() && cside.getSelectedProject().openAllScenes(), 
    !1;
}), Mousetrap.bind([ "command+o", "ctrl+o" ], function() {
    return cside.openFileBrowser(), !1;
}), Mousetrap.bind([ "command+q", "ctrl+shift+q" ], function() {
    return win.close(), !1;
}), $("#splash").fadeOut(100), document.ondragenter = function(e) {
    e.preventDefault(), e.stopPropagation();
    e.dataTransfer;
    return !1;
}, document.ondragleave = function(e) {
    return e.preventDefault(), e.stopPropagation(), !1;
}, document.ondragover = function(e) {
    return e.preventDefault(), !1;
}, document.ondrop = function(e) {
    return e.preventDefault(), !1;
}, window.onload = function() {
    for (var i = 0; i < window.frames.length; i++) window.frames[i].ondragover = function(e) {
        return e.preventDefault(), !1;
    }, window.frames[i].ondrop = function(e) {
        return e.preventDefault(), !1;
    };
}, document.getElementById("sidebar").ondragover = function(e) {
    return e.preventDefault(), e.stopPropagation(), !1;
}, document.getElementById("sidebar").ondragleave = function(e) {
    return e.preventDefault(), e.stopPropagation(), !1;
}, document.getElementById("sidebar").ondragenter = function(e) {
    return e.preventDefault(), e.stopPropagation(), !1;
}, document.getElementById("sidebar").ondrop = function(e) {
    if (e.preventDefault(), !window.usingNode) return !1;
    for (var file, fileList = e.dataTransfer.files, i = 0; i < fileList.length; i++) ".txt" == (file = e.dataTransfer.files[i]).path.substring(file.path.lastIndexOf("."), file.path.length) && cside.openScene(file.path);
};